/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.midAngle = exports.findFollowing = exports.findPreceding = exports.findNeighbor = exports.radiansToDegrees = exports.degreesToRadians = undefined;

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var degreesToRadians = exports.degreesToRadians = function degreesToRadians(degrees) {
    return degrees * Math.PI / 180;
};

var radiansToDegrees = exports.radiansToDegrees = function radiansToDegrees(radians) {
    return 180 * radians / Math.PI;
};

/**
 * Try to get a neighbor arc, otherwise, returns null.
 *
 * @param {Number}   i
 * @param {function} identity
 * @param {Array}    prevData
 * @param {Array}    newData
 * @returns {{startAngle: *, endAngle: *}}
 */
var findNeighbor = exports.findNeighbor = function findNeighbor(i, identity, prevData, newData) {
    var preceding = findPreceding(i, identity, prevData, newData);
    if (preceding) {
        return {
            startAngle: preceding.endAngle,
            endAngle: preceding.endAngle
        };
    }

    var following = findFollowing(i, identity, prevData, newData);
    if (following) {
        return {
            startAngle: following.startAngle,
            endAngle: following.startAngle
        };
    }

    return null;
};

/**
 * Find the element in prevData that joins the highest preceding element in newData.
 *
 * @param {Number}   i
 * @param {function} identity
 * @param {Array}    prevData
 * @param {Array}    newData
 * @returns {*}
 */
var findPreceding = exports.findPreceding = function findPreceding(i, identity, prevData, newData) {
    var m = prevData.length;

    while (--i >= 0) {
        var k = identity(newData[i]);

        for (var j = 0; j < m; ++j) {
            if (identity(prevData[j]) === k) {
                return prevData[j];
            }
        }
    }
};

/**
 * Find the element in prevData that joins the lowest following element in newData.
 *
 * @param {Number}   i
 * @param {function} identity
 * @param {Array}    prevData
 * @param {Array}    newData
 * @returns {*}
 */
var findFollowing = exports.findFollowing = function findFollowing(i, identity, prevData, newData) {
    var n = newData.length;
    var m = prevData.length;

    while (++i < n) {
        var k = identity(newData[i]);

        for (var j = 0; j < m; ++j) {
            if (identity(prevData[j]) === k) {
                return prevData[j];
            }
        }
    }
};

var midAngle = exports.midAngle = function midAngle(arc) {
    return arc.startAngle + (arc.endAngle - arc.startAngle) / 2;
};