/*
 * This file is part of the nivo project.
 *
 * (c) Raphaël Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RadialStackD3Svg = function RadialStackD3Svg(domRoot) {

    // DOM elements
    var svg = _d2.default.select(domRoot);
    var element = svg.append('g');

    // d3 scales/layouts
    var stack = _d2.default.layout.stack();
    var angle = _d2.default.scale.linear();
    var radius = _d2.default.scale.linear();
    var area = _d2.default.svg.area.radial().interpolate('cardinal-closed');

    // an array to store decorator functions
    var decorators = [];

    return {
        draw: function draw(props) {
            var margin = props.margin,
                layers = props.layers,
                offset = props.offset,
                innerRadius = props.innerRadius,
                colors = props.colors,
                transitionDuration = props.transitionDuration,
                transitionEasing = props.transitionEasing;


            var width = props.width - margin.left - margin.right;
            var height = props.height - margin.top - margin.bottom;

            svg.attr({
                width: props.width,
                height: props.height
            });

            element.attr('transform', 'translate(' + (width / 2 + margin.left) + ', ' + (height / 2 + margin.top) + ')');

            stack.offset(offset);

            var stacked = stack(layers);

            angle.range([0, 2 * Math.PI]).domain([0, stacked[0].length]);

            var outerRadius = Math.min(width, height) / 2;
            radius.range([outerRadius * innerRadius, outerRadius]).domain([0, _d2.default.max(stacked, function (layer) {
                return _d2.default.max(layer, function (d) {
                    return d.y0 + d.y;
                });
            })]);

            var color = (0, _ColorUtils.getColorRange)(colors);

            area.angle(function (d) {
                return angle(d.x);
            }).innerRadius(function (d) {
                return radius(d.y0);
            }).outerRadius(function (d) {
                return radius(d.y0 + d.y);
            });

            var paths = element.selectAll('.nivo_radial-stack_area').data(stacked);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // ENTER: creates new elements
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            paths.enter().append('path').attr('class', 'nivo_radial-stack_area').attr('d', area).style('fill', function (d, i) {
                return color(i);
            });

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // UPDATE: updates existing elements
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            paths.transition().duration(transitionDuration).ease(transitionEasing).attr('d', area).style('fill', function (d, i) {
                return color(i);
            });

            var radialStackContext = {
                element: element,
                outerRadius: outerRadius,
                innerRadius: outerRadius * innerRadius,
                layers: layers, stacked: stacked,
                radius: radius, angle: angle,
                transitionDuration: transitionDuration, transitionEasing: transitionEasing
            };

            decorators.forEach(function (decorator) {
                decorator(radialStackContext);
            });
        },
        decorate: function decorate() {
            var newDecorators = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            decorators = newDecorators;
        }
    };
};

exports.default = RadialStackD3Svg;