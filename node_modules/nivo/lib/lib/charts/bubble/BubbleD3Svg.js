/*
 * This file is part of the nivo project.
 *
 * (c) Raphaël Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _BubbleD = require('./BubbleD3');

var _BubbleD2 = _interopRequireDefault(_BubbleD);

var _ColorUtils = require('../../../ColorUtils');

var _propertiesConverters = require('../../propertiesConverters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BubbleD3Svg = function BubbleD3Svg(domRoot) {

    // DOM elements
    var element = _d2.default.select(domRoot);
    var wrapper = element.append('g').attr('class', 'nivo_bubble_wrapper');

    var bubble = (0, _BubbleD2.default)();

    // an array to store decorator functions
    var decorators = [];

    return {
        draw: function draw(props) {
            var data = props.data,
                onBubbleClick = props.onBubbleClick,
                identityProperty = props.identityProperty,
                value = props.value,
                width = props.width,
                height = props.height,
                margin = props.margin,
                padding = props.padding,
                colors = props.colors,
                borderWidth = props.borderWidth,
                borderColor = props.borderColor,
                label = props.label,
                labelFormat = props.labelFormat,
                labelSkipRadius = props.labelSkipRadius,
                labelTextColor = props.labelTextColor,
                labelTextDY = props.labelTextDY,
                transitionDuration = props.transitionDuration,
                transitionEasing = props.transitionEasing;


            var identity = function identity(d) {
                return d[identityProperty];
            };
            var valueAccessor = function valueAccessor(d) {
                return d[value];
            };

            element.attr({ width: width, height: height });

            var useWidth = width - margin.left - margin.right;
            var useHeight = height - margin.top - margin.bottom;

            wrapper.attr({
                width: useWidth,
                height: useHeight,
                transform: 'translate(' + margin.left + ',' + margin.top + ')'
            });

            var color = (0, _ColorUtils.getColorRange)(colors);
            var borderColorFn = (0, _ColorUtils.getColorGenerator)(borderColor);

            var bubbled = bubble.compute({
                width: useWidth,
                height: useHeight,
                data: data,
                identityProperty: identityProperty, valueAccessor: valueAccessor,
                padding: padding,
                color: color
            });

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // NODES
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            var nodes = wrapper.selectAll('.nivo_bubble_node').data(bubbled, identity);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // ENTER: creates new nodes
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            nodes.enter().append('circle').attr('class', 'nivo_bubble_node').attr('r', 2).style('fill', function (d) {
                return d.color;
            }).style('stroke', borderColorFn).style('stroke-width', borderWidth).attr('transform', function (d) {
                return 'translate(' + d.x + ',' + d.y + ')';
            }).on('click', onBubbleClick);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // UPDATE: updates existing nodes
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            nodes.transition().duration(transitionDuration).ease(transitionEasing).style('fill', function (d) {
                return d.color;
            }).style('stroke', borderColorFn).style('stroke-width', borderWidth).attr('r', function (d) {
                return d.r;
            }).attr('transform', function (d) {
                return 'translate(' + d.x + ',' + d.y + ')';
            });

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // EXIT: removes stale nodes
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            nodes.exit().transition().duration(transitionDuration).ease(transitionEasing).attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')').attr('r', 0).remove();

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // LABELS
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            var labelFn = (0, _propertiesConverters.convertLabel)(label, labelFormat);
            var textColorStyle = (0, _ColorUtils.getColorStyleObject)(labelTextColor, 'fill');

            var legendsData = bubbled;
            if (labelSkipRadius > 0) {
                legendsData = bubbled.filter(function (d) {
                    return d.r >= labelSkipRadius;
                });
            }

            var legends = wrapper.selectAll('.nivo_bubble_legend').data(legendsData, identity);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // ENTER: creates new labels
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            legends.enter().append('text').attr('class', 'nivo_bubble_legend').style('text-anchor', 'middle').style(textColorStyle).style('opacity', 0).text(labelFn).attr('transform', function (d) {
                return 'translate(' + d.x + ',' + d.y + ')';
            }).attr('dy', labelTextDY).on('click', onBubbleClick);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // UPDATE: updates existing labels
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            legends.text(labelFn).transition().duration(transitionDuration).ease(transitionEasing).style(textColorStyle).style('opacity', 1).attr('transform', function (d) {
                return 'translate(' + d.x + ',' + d.y + ')';
            }).attr('dy', labelTextDY);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // EXIT: removes stale labels
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            legends.exit().transition().duration(transitionDuration).ease(transitionEasing).style('opacity', 0).remove();

            var bubbleContext = {
                element: wrapper,
                width: useWidth,
                height: useHeight,
                rawData: data,
                identity: identity,
                valueAccessor: valueAccessor,
                data: bubbled,
                transitionDuration: transitionDuration,
                transitionEasing: transitionEasing
            };

            decorators.forEach(function (decorator) {
                decorator(bubbleContext);
            });
        },
        decorate: function decorate() {
            var newDecorators = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            decorators = newDecorators;
        }
    };
};

exports.default = BubbleD3Svg;