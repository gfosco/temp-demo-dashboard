/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LABEL_POSITION_LEFT = exports.LABEL_POSITION_BOTTOM = exports.LABEL_POSITION_RIGHT = exports.LABEL_POSITION_TOP = exports.LABEL_POSITION_CENTER = undefined;

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// label positioning
var LABEL_POSITION_CENTER = exports.LABEL_POSITION_CENTER = 'center';
var LABEL_POSITION_TOP = exports.LABEL_POSITION_TOP = 'top';
var LABEL_POSITION_RIGHT = exports.LABEL_POSITION_RIGHT = 'right';
var LABEL_POSITION_BOTTOM = exports.LABEL_POSITION_BOTTOM = 'bottom';
var LABEL_POSITION_LEFT = exports.LABEL_POSITION_LEFT = 'left';

var labelMaker = function labelMaker(_ref) {
    var text = _ref.text,
        position = _ref.position,
        labelOffset = _ref.labelOffset,
        labelPaddingX = _ref.labelPaddingX,
        labelPaddingY = _ref.labelPaddingY;

    return function (g) {
        var labelBackground = g.select('rect');
        var labelText = g.select('text');

        if (labelBackground.empty()) {
            labelBackground = g.append('rect');
            labelText = g.append('text');
        }

        labelText.attr('alignment-baseline', 'text-before-edge').style('fill', '#fff').text(text);

        var textBBox = labelText.node().getBBox();

        var textX = 0;
        var textY = 0;

        var bgX = 0;
        var bgY = 0;

        switch (position) {
            case 'center':
                textX = -textBBox.width / 2;
                textY = -textBBox.height / 2;

                bgX = -textBBox.width / 2 - labelPaddingX;
                bgY = -textBBox.height / 2 - labelPaddingY;
                break;

            case 'top':
                textX = -textBBox.width / 2;
                textY = -textBBox.height - labelOffset - labelPaddingY;

                bgX = -textBBox.width / 2 - labelPaddingX;
                bgY = -textBBox.height - labelOffset - labelPaddingY * 2;
                break;

            case 'right':
                textX = labelOffset + labelPaddingX;
                textY = -textBBox.height / 2;

                bgX = labelOffset;
                bgY = -textBBox.height / 2 - labelPaddingY;
                break;

            case 'bottom':
                textX = -textBBox.width / 2;
                textY = labelOffset + labelPaddingY;

                bgX = -textBBox.width / 2 - labelPaddingX;
                bgY = labelOffset;
                break;

            case 'left':
                textX = -textBBox.width - labelOffset - labelPaddingX;
                textY = -textBBox.height / 2;

                bgX = -textBBox.width - labelOffset - labelPaddingX * 2;
                bgY = -textBBox.height / 2 - labelPaddingY;
                break;
        }

        _d2.default.transition(labelBackground).style('fill', '#e25d47').attr({
            width: textBBox.width + labelPaddingX * 2,
            height: textBBox.height + labelPaddingY * 2,
            rx: 2,
            ry: 2,
            transform: 'translate(' + bgX + ',' + bgY + ')'
        });

        _d2.default.transition(labelText).attr('transform', 'translate(' + textX + ',' + textY + ')');
    };
};

exports.default = labelMaker;