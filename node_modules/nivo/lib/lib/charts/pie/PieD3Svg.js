/*
 * This file is part of the nivo project.
 *
 * (c) Raphaël Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _ArcUtils = require('../../../ArcUtils');

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PieD3Svg = function PieD3Svg(domRoot) {

    // DOM elements
    var element = _d2.default.select(domRoot);
    var outline = element.append('path').attr('class', 'nivo_pie_outline');
    var slices = element.append('g').attr('class', 'nivo_pie_slices');

    // d3 generators
    var pie = _d2.default.layout.pie();
    var arc = _d2.default.svg.arc();

    // used to store previous state for smart transitions
    var previousData = [];

    // an array to store decorator functions
    var decorators = [];

    return {
        draw: function draw(props) {
            var data = props.data,
                width = props.width,
                height = props.height,
                sort = props.sort,
                keyProp = props.keyProp,
                valueProp = props.valueProp,
                startAngle = props.startAngle,
                endAngle = props.endAngle,
                padAngle = props.padAngle,
                cornerRadius = props.cornerRadius,
                colors = props.colors,
                innerRadius = props.innerRadius,
                transitionDuration = props.transitionDuration,
                transitionEasing = props.transitionEasing;


            var identity = function identity(d) {
                return d.data[keyProp];
            };
            var color = (0, _ColorUtils.getColorRange)(colors);

            element.attr('transform', 'translate(' + width / 2 + ', ' + height / 2 + ')');

            pie.sort(sort).value(function (d) {
                return d[valueProp];
            }).startAngle((0, _ArcUtils.degreesToRadians)(startAngle)).endAngle((0, _ArcUtils.degreesToRadians)(endAngle)).padAngle((0, _ArcUtils.degreesToRadians)(padAngle));

            var radius = Math.min(width / 2, height / 2);

            arc.outerRadius(radius).innerRadius(radius * innerRadius).cornerRadius(cornerRadius);

            outline.attr('d', arc({
                startAngle: (0, _ArcUtils.degreesToRadians)(startAngle),
                endAngle: (0, _ArcUtils.degreesToRadians)(endAngle)
            }));

            var slice = slices.selectAll('.nivo_pie_slice');

            var newData = pie(data.map(function (d, i) {
                if (!d.color) {
                    d.color = color(i);
                }

                return d;
            }));

            //console.log(_.cloneDeep(newData));

            function arcTween(a) {
                var i = _d2.default.interpolate(this._current, a);
                this._current = i(0);

                return function (t) {
                    return arc(i(t));
                };
            }

            slice = slice.data(newData, identity);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // ENTER: creates new elements
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            slice.enter().append('path').attr('class', 'nivo_pie_slice').style('fill', function (d) {
                return d.data.color;
            }).each(function (d, i) {
                var angle = (0, _ArcUtils.midAngle)(d);

                this._current = (0, _ArcUtils.findNeighbor)(i, identity, previousData, newData) || _.assign({}, d, {
                    startAngle: 0,
                    endAngle: 0
                });
            });

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // UPDATE: updates existing elements
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            slice.transition().duration(transitionDuration).ease(transitionEasing).style('fill', function (d) {
                return d.data.color;
            }).attrTween('d', arcTween);

            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            // EXIT: removes stale elements
            // —————————————————————————————————————————————————————————————————————————————————————————————————————————
            slice.exit().attr('class', 'nivo_exit').datum(function (d, i) {
                return (0, _ArcUtils.findNeighbor)(i, identity, newData, previousData) || d;
            }).transition().duration(transitionDuration).ease(transitionEasing).attrTween('d', arcTween).remove();

            var pieContext = {
                element: element,
                pie: pie, arc: arc, radius: radius,
                identity: identity, previousData: previousData, newData: newData,
                transitionDuration: transitionDuration, transitionEasing: transitionEasing
            };

            decorators.forEach(function (legend) {
                legend(pieContext);
            });

            previousData = newData;
        },
        decorate: function decorate() {
            var newDecorators = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            decorators = newDecorators;
        }
    };
};

exports.default = PieD3Svg;