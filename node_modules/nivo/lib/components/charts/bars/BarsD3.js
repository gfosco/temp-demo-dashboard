/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _ColorUtils = require('../../../ColorUtils');

var _PropTypes = require('../../../PropTypes');

var _decoratorsFromReactChildren = require('../../../lib/decoratorsFromReactChildren');

var _decoratorsFromReactChildren2 = _interopRequireDefault(_decoratorsFromReactChildren);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BarsD3 = function (_Component) {
    _inherits(BarsD3, _Component);

    function BarsD3() {
        _classCallCheck(this, BarsD3);

        return _possibleConstructorReturn(this, (BarsD3.__proto__ || Object.getPrototypeOf(BarsD3)).apply(this, arguments));
    }

    _createClass(BarsD3, [{
        key: 'renderD3',
        value: function renderD3(props) {
            var groupMode = props.groupMode,
                onBarClick = props.onBarClick,
                colors = props.colors,
                classify = props.classify,
                transitionDuration = props.transitionDuration,
                transitionEasing = props.transitionEasing,
                transitionStaggering = props.transitionStaggering;


            var element = _d2.default.select((0, _reactDom.findDOMNode)(this));
            var wrapper = element.select('.nivo_bars_wrapper');

            var margin = _lodash2.default.assign({}, _Nivo2.default.defaults.margin, props.margin);
            var width = props.width - margin.left - margin.right;
            var height = props.height - margin.top - margin.bottom;

            var data = [];

            props.data.forEach(function (d) {
                d.values.forEach(function (value, i) {
                    var datum = _lodash2.default.assign({}, value, {
                        stackIndex: i,
                        x: d.x,
                        xId: d.id
                    });

                    if (i === 0) {
                        datum.y0 = 0;
                        datum.y1 = value.y;
                    } else {
                        datum.y0 = data[data.length - 1].y1;
                        datum.y1 = datum.y0 + value.y;
                    }

                    data.push(datum);
                });
            });

            element.attr({
                width: props.width,
                height: props.height
            });
            wrapper.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

            var xScale = _d2.default.scale.ordinal().rangeRoundBands([0, width], .2).domain(data.map(function (d, i) {
                return d.x;
            }));

            var maxYValue = void 0;
            if (groupMode === 'stacked') {
                maxYValue = _d2.default.max(data, function (d) {
                    return d.y1;
                });
            } else {
                maxYValue = _d2.default.max(data, function (d) {
                    return d.y;
                });
            }

            var maxGroupLength = _d2.default.max(props.data, function (d) {
                return d.values.length;
            });

            var yScale = _d2.default.scale.linear().rangeRound([height, 0]).domain([0, maxYValue]);

            var color = (0, _ColorUtils.getColorRange)(colors);

            data = data.map(function (d) {
                var rendered = void 0;
                if (groupMode === 'stacked') {
                    rendered = {
                        x: xScale(d.x),
                        y: yScale(d.y1),
                        width: xScale.rangeBand(),
                        height: yScale(d.y0) - yScale(d.y1)

                    };
                } else {
                    rendered = {
                        x: xScale(d.x) + d.stackIndex * xScale.rangeBand() / maxGroupLength,
                        y: yScale(d.y),
                        width: xScale.rangeBand() / maxGroupLength,
                        height: height - yScale(d.y)
                    };
                }

                d.render = _extends({
                    color: color(d.id)
                }, rendered);

                return d;
            });

            //console.log(data);

            var rects = wrapper.selectAll('.nivo_bars_bar').data(data, function (d) {
                return '' + d.xId + d.id;
            });

            rects.enter().append('rect').classed('nivo_bars_bar', true).attr('width', function (d) {
                return d.render.width;
            }).attr('x', function (d) {
                return d.render.x;
            }).attr('y', height).attr('height', 0).style('fill', function (d) {
                return d.render.color;
            }).on('click', onBarClick);

            if (groupMode === 'stacked') {
                rects.transition().delay(function (d, i) {
                    return i * transitionStaggering;
                }).duration(transitionDuration).ease(transitionEasing).style('fill', function (d) {
                    return d.render.color;
                }).attr('y', function (d) {
                    return d.render.y;
                }).attr('height', function (d) {
                    return d.render.height;
                }).transition().duration(transitionDuration).ease(transitionEasing).attr('x', function (d) {
                    return d.render.x;
                }).attr('width', function (d) {
                    return d.render.width;
                });
            } else {
                rects.transition().delay(function (d, i) {
                    return i * transitionStaggering;
                }).duration(transitionDuration).ease(transitionEasing).style('fill', function (d) {
                    return d.render.color;
                }).attr('x', function (d) {
                    return d.render.x;
                }).attr('width', function (d) {
                    return d.render.width;
                }).transition().duration(transitionDuration).ease(transitionEasing).attr('y', function (d) {
                    return d.render.y;
                }).attr('height', function (d) {
                    return d.render.height;
                });
            }

            this.decorators.forEach(function (decorator) {});
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            this.decorators = (0, _decoratorsFromReactChildren2.default)(nextProps.children, 'decorateBars');

            this.renderD3(nextProps, nextState);

            return false;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.decorators = (0, _decoratorsFromReactChildren2.default)(this.props.children, 'decorateBars');

            this.renderD3(this.props, this.state);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'svg',
                { className: 'nivo_bars' },
                _react2.default.createElement('g', { className: 'nivo_bars_wrapper' })
            );
        }
    }]);

    return BarsD3;
}(_react.Component);

var number = _react.PropTypes.number,
    string = _react.PropTypes.string,
    func = _react.PropTypes.func,
    any = _react.PropTypes.any,
    oneOf = _react.PropTypes.oneOf,
    oneOfType = _react.PropTypes.oneOfType,
    arrayOf = _react.PropTypes.arrayOf,
    shape = _react.PropTypes.shape;


BarsD3.propTypes = {
    width: number.isRequired,
    height: number.isRequired,
    margin: _PropTypes.margin,
    data: arrayOf(shape({
        x: number.isRequired,
        id: oneOfType([number, string]).isRequired,
        values: arrayOf(shape({
            id: oneOfType([number, string]).isRequired,
            y: number.isRequired
        })).isRequired
    })).isRequired,
    groupMode: oneOf(['stacked', 'grouped']),
    onBarClick: func.isRequired,
    colors: any.isRequired,
    classify: func,
    transitionDuration: number.isRequired,
    transitionEasing: string.isRequired,
    transitionStaggering: number.isRequired
};

BarsD3.defaultProps = {
    margin: _Nivo2.default.defaults.margin,
    groupMode: 'stacked',
    onBarClick: function onBarClick() {},
    colors: _Nivo2.default.defaults.colorRange,
    transitionDuration: _Nivo2.default.defaults.transitionDuration,
    transitionEasing: _Nivo2.default.defaults.transitionEasing,
    transitionStaggering: 10
};

exports.default = BarsD3;