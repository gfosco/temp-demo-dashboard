/*
 * This file is part of the nivo project.
 *
 * (c) 2016 RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _PropTypes = require('../../../PropTypes');

var _ColorUtils = require('../../../ColorUtils');

var _propertiesConverters = require('../../../lib/propertiesConverters');

var _Axis = require('../../axes/Axis');

var _Axis2 = _interopRequireDefault(_Axis);

var _Grid = require('../../axes/Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _BarItem = require('./BarItem');

var _BarItem2 = _interopRequireDefault(_BarItem);

var _BarItemLabel = require('./BarItemLabel');

var _BarItemLabel2 = _interopRequireDefault(_BarItemLabel);

var _d = require('d3');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getAxis = function getAxis(axes, scales, orient, width, height, _ref) {
    var animate = _ref.animate,
        motionStiffness = _ref.motionStiffness,
        motionDamping = _ref.motionDamping;

    if (!axes[orient]) return null;

    var axis = axes[orient];
    var scale = scales[axis.scale];

    var x = orient === 'right' ? width : 0;
    var y = orient === 'bottom' ? height : 0;

    return _react2.default.createElement(
        'g',
        { key: 'axis.' + orient, transform: 'translate(' + x + ',' + y + ')' },
        _react2.default.createElement(_Axis2.default, {
            orient: orient,
            scale: scale,
            format: axis.format,
            tickSize: axis.tickSize,
            tickPadding: axis.tickPadding,
            animate: animate,
            motionStiffness: motionStiffness,
            motionDamping: motionDamping
        })
    );
};

var Bar = function (_Component) {
    _inherits(Bar, _Component);

    function Bar() {
        _classCallCheck(this, Bar);

        return _possibleConstructorReturn(this, (Bar.__proto__ || Object.getPrototypeOf(Bar)).apply(this, arguments));
    }

    _createClass(Bar, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                data = _props.data,
                groupMode = _props.groupMode,
                _identity = _props.identity,
                _margin = _props.margin,
                _width = _props.width,
                _height = _props.height,
                colors = _props.colors,
                _scales = _props.scales,
                series = _props.series,
                axes = _props.axes,
                enableGridX = _props.enableGridX,
                enableGridY = _props.enableGridY,
                enableLabels = _props.enableLabels,
                animate = _props.animate,
                motionStiffness = _props.motionStiffness,
                motionDamping = _props.motionDamping;


            var margin = Object.assign({}, _Nivo2.default.defaults.margin, _margin);
            var width = _width - margin.left - margin.right;
            var height = _height - margin.top - margin.bottom;

            var color = (0, _ColorUtils.getColorRange)(colors);

            var scales = {};
            _scales.forEach(function (_ref2) {
                var id = _ref2.id,
                    type = _ref2.type,
                    axis = _ref2.axis,
                    key = _ref2.key,
                    padding = _ref2.padding;

                var mapper = _lodash2.default.isFunction(key) ? key : function (d) {
                    return d[key];
                };

                var range = [axis === 'y' ? height : 0, axis === 'x' ? width : 0];

                var scale = void 0;
                if (type === 'linear') {
                    scale = (0, _d.scaleLinear)().rangeRound(range).domain([0, (0, _d.max)(data.map(mapper))]);
                } else if (type === 'band') {
                    scale = (0, _d.scaleBand)().rangeRound(range).domain(data.map(mapper));

                    if (padding !== undefined) {
                        scale.padding(padding);
                    }
                }

                scales[id] = scale;
            });

            var rects = [];
            series.forEach(function (serie, serieIndex) {
                var xScale = scales[serie.xScale];
                var yScale = scales[serie.yScale];

                var getX = _lodash2.default.isFunction(serie.x) ? serie.x : function (d) {
                    return d[serie.x];
                };
                var getY = _lodash2.default.isFunction(serie.y) ? serie.y : function (d) {
                    return d[serie.y];
                };

                data.forEach(function (d, i) {
                    var x = void 0;
                    var y = void 0;
                    var barWidth = void 0;
                    var barHeight = void 0;

                    if (xScale.bandwidth) {
                        barWidth = xScale.bandwidth() / series.length;
                        x = xScale(getX(d)) + barWidth * serieIndex;
                    } else {
                        x = 0;
                        barWidth = xScale(getX(d));
                    }

                    if (yScale.bandwidth) {
                        barHeight = yScale.bandwidth() / series.length;
                        y = yScale(getY(d)) + barHeight * serieIndex;
                    } else {
                        y = yScale(getY(d));
                        barHeight = height - y;
                    }

                    if (barWidth > 0 && barHeight > 0) {
                        rects.push({
                            key: serieIndex + '.' + i,
                            //value,
                            x: x, y: y,
                            width: barWidth,
                            height: barHeight,
                            color: color(serieIndex)
                        });
                    }
                });
            });

            /*
            if (groupMode === 'stacked') {
                const series = stack().keys(keys)(data)
                 y.domain([0, max(series[series.length - 1], d => d[1])])
                 series.forEach(serie => {
                    serie.forEach(d => {
                        rects.push({
                            key:    `${serie.key}.${identity(d.data)}`,
                            value:  d[1],
                            x:      x(identity(d.data)),
                            y:      y(d[1]),
                            width:  x.bandwidth(),
                            height: y(d[0]) - y(d[1]),
                            color:  color(serie.key),
                        })
                    })
                })
            } else {
                y.domain([0, max(data, d => max(_.values(_.pick(d, keys))))])
                 const barWidth = x.bandwidth() / keys.length
                 data.forEach(bucket => {
                    let index = 0
                    _.forOwn(_.pick(bucket, keys), (value, key) => {
                        rects.push({
                            key:    `${key}.${identity(bucket)}`,
                            value,
                            x:      x(identity(bucket)) + barWidth * index,
                            y:      y(value),
                            width:  barWidth,
                            height: height - y(value),
                            color:  color(key),
                        })
                        index++
                    })
                })
            }
            */

            var props = this.props;


            return _react2.default.createElement(
                'svg',
                { xmlns: 'http://www.w3.org/2000/svg', className: 'nivo_bar', width: _width, height: _height },
                _react2.default.createElement(
                    'g',
                    {
                        className: 'nivo_bar_wrapper',
                        transform: 'translate(' + margin.left + ',' + margin.top + ')'
                    },
                    rects.map(function (d) {
                        return _react2.default.createElement(_BarItem2.default, _extends({}, d, { key: d.key }));
                    }),
                    enableLabels && rects.map(function (d) {
                        return _react2.default.createElement(_BarItemLabel2.default, _extends({}, d, { key: d.key }));
                    }),
                    ['top', 'right', 'bottom', 'left'].map(function (orient) {
                        return getAxis(axes, scales, orient, width, height, props);
                    })
                )
            );
        }
    }]);

    return Bar;
}(_react.Component);

var axisPropType = _react.PropTypes.shape({
    scale: _react.PropTypes.string.isRequired,
    tickSize: _react.PropTypes.number,
    tickPadding: _react.PropTypes.number,
    format: _react.PropTypes.func
});

var keyPropType = _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.func]);

Bar.propTypes = {
    width: _react.PropTypes.number.isRequired,
    height: _react.PropTypes.number.isRequired,
    margin: _PropTypes.margin,
    data: _react.PropTypes.arrayOf(_react.PropTypes.object).isRequired,
    groupMode: _react.PropTypes.oneOf(['stacked', 'grouped']).isRequired,
    spacing: _react.PropTypes.number,
    colors: _react.PropTypes.any.isRequired,

    // scales
    scales: _react.PropTypes.arrayOf(_react.PropTypes.shape({
        id: _react.PropTypes.string.isRequired,
        type: _react.PropTypes.oneOf(['linear', 'band']).isRequired,
        key: keyPropType.isRequired,
        axis: _react.PropTypes.oneOf(['x', 'y']).isRequired
    })).isRequired,

    // series
    series: _react.PropTypes.arrayOf(_react.PropTypes.shape({
        xScale: _react.PropTypes.string.isRequired,
        yScale: _react.PropTypes.string.isRequired,
        x: keyPropType.isRequired,
        y: keyPropType.isRequired
    })).isRequired,

    // axes
    axes: _react.PropTypes.shape({
        top: axisPropType,
        right: axisPropType,
        bottom: axisPropType,
        left: axisPropType
    }),
    enableGridX: _react.PropTypes.bool.isRequired,
    enableGridY: _react.PropTypes.bool.isRequired,

    // labels
    enableLabels: _react.PropTypes.bool.isRequired,

    // motion
    animate: _react.PropTypes.bool.isRequired,
    motionStiffness: _react.PropTypes.number.isRequired,
    motionDamping: _react.PropTypes.number.isRequired
};

Bar.defaultProps = {
    margin: _Nivo2.default.defaults.margin,
    groupMode: 'stacked',
    spacing: 0.1,
    colors: _Nivo2.default.defaults.colorRange,

    // axes
    enableGridX: false,
    enableGridY: false,

    // labels
    enableLabels: true,

    // motion
    animate: true,
    motionStiffness: _Nivo2.default.defaults.motionStiffness,
    motionDamping: _Nivo2.default.defaults.motionDamping
};

exports.default = Bar;