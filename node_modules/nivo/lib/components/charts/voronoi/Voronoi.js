/*
 * This file is part of the nivo project.
 *
 * (c) 2016 RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _d = require('d3');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Voronoi = function (_Component) {
    _inherits(Voronoi, _Component);

    function Voronoi() {
        _classCallCheck(this, Voronoi);

        return _possibleConstructorReturn(this, (Voronoi.__proto__ || Object.getPrototypeOf(Voronoi)).apply(this, arguments));
    }

    _createClass(Voronoi, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                data = _props.data,
                _width = _props.width,
                _height = _props.height,
                _margin = _props.margin,
                x = _props.x,
                y = _props.y,
                enableSites = _props.enableSites,
                enableLinks = _props.enableLinks,
                enablePolygons = _props.enablePolygons,
                borderWidth = _props.borderWidth,
                borderColor = _props.borderColor,
                linkWidth = _props.linkWidth,
                linkColor = _props.linkColor;


            var margin = Object.assign({}, _Nivo2.default.defaults.margin, _margin);
            var width = _width - margin.left - margin.right;
            var height = _height - margin.top - margin.bottom;

            var voronoi = (0, _d.voronoi)().x(function (d) {
                return d[x];
            }).y(function (d) {
                return d[y];
            }).extent([[0, 0], [width, height]]);

            var polygons = voronoi.polygons(data);
            var links = voronoi.links(data);

            return _react2.default.createElement(
                'svg',
                {
                    xmlns: 'http://www.w3.org/2000/svg',
                    width: _width,
                    height: _height
                },
                _react2.default.createElement(
                    'g',
                    { transform: 'translate(' + margin.left + ',' + margin.top + ')' },
                    enableLinks && links.map(function (l) {
                        return _react2.default.createElement('line', {
                            fill: 'none',
                            stroke: linkColor,
                            strokeWidth: linkWidth,
                            x1: l.source[0],
                            y1: l.source[1],
                            x2: l.target[0],
                            y2: l.target[1]
                        });
                    }),
                    enablePolygons && polygons.map(function (p) {
                        return _react2.default.createElement('path', {
                            fill: 'none',
                            stroke: borderColor,
                            strokeWidth: borderWidth,
                            d: 'M' + p.join('L') + 'Z'
                        });
                    }),
                    enableSites && data.map(function (d) {
                        return _react2.default.createElement('circle', {
                            r: '2.5',
                            cx: d[0],
                            cy: d[1],
                            fill: '#F00',
                            stroke: 'none'
                        });
                    })
                )
            );
        }
    }]);

    return Voronoi;
}(_react.Component);

Voronoi.propTypes = {
    enableSites: _react.PropTypes.bool.isRequired,
    enableLinks: _react.PropTypes.bool.isRequired,
    enablePolygons: _react.PropTypes.bool.isRequired,
    x: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
    y: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
    colors: _react.PropTypes.any.isRequired,
    borderWidth: _react.PropTypes.number.isRequired,
    borderColor: _react.PropTypes.string.isRequired,
    linkWidth: _react.PropTypes.number.isRequired,
    linkColor: _react.PropTypes.string.isRequired
};

Voronoi.defaultProps = {
    enableSites: true,
    enableLinks: true,
    enablePolygons: true,
    x: 0,
    y: 1,
    borderWidth: 1,
    borderColor: '#000',
    linkWidth: 1,
    linkColor: '#bbb',
    colors: _Nivo2.default.defaults.colorRange
};

exports.default = Voronoi;