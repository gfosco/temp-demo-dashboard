/*
 * This file is part of the nivo project.
 *
 * (c) 2016 RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _propertiesConverters = require('../../../lib/propertiesConverters');

var _TreeMapProps = require('./TreeMapProps');

var _TreeMapPlaceholders = require('./TreeMapPlaceholders');

var _TreeMapPlaceholders2 = _interopRequireDefault(_TreeMapPlaceholders);

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createNodes = function createNodes(_ref) {
    var borderWidth = _ref.borderWidth,
        borderColor = _ref.borderColor,
        enableLabels = _ref.enableLabels,
        _label = _ref.label,
        labelFormat = _ref.labelFormat,
        orientLabels = _ref.orientLabels,
        labelSkipSize = _ref.labelSkipSize,
        labelTextColor = _ref.labelTextColor;

    var label = (0, _propertiesConverters.convertLabel)(_label, labelFormat);
    var borderColorFn = (0, _ColorUtils.getColorGenerator)(borderColor);
    var textColorFn = (0, _ColorUtils.getColorGenerator)(labelTextColor);

    return function (nodes) {
        var renderedNodes = [];

        nodes.forEach(function (node) {
            var shouldRenderLabel = enableLabels && node.data.height === 0 && (labelSkipSize === 0 || Math.min(node.style.width, node.style.height) > labelSkipSize);

            var rotate = shouldRenderLabel && orientLabels && node.style.height > node.style.width;

            renderedNodes.push(_react2.default.createElement(
                'g',
                {
                    key: node.key,
                    className: 'nivo_treemap_node',
                    transform: 'translate(' + node.style.x + ',' + node.style.y + ')'
                },
                _react2.default.createElement('rect', {
                    width: node.style.width,
                    height: node.style.height,
                    fill: node.style.color,
                    stroke: borderColorFn(node.data),
                    strokeWidth: borderWidth
                }),
                shouldRenderLabel && _react2.default.createElement(
                    'g',
                    {
                        transform: 'translate(' + node.style.width / 2 + ',' + node.style.height / 2 + ') rotate(' + (rotate ? '-90' : '0') + ')'
                    },
                    _react2.default.createElement(
                        'text',
                        {
                            className: 'nivo_treemap_node_label',
                            textAnchor: 'middle',
                            dy: '0.5em',
                            style: {
                                fill: textColorFn(node.data)
                            }
                        },
                        label(node.data.data)
                    )
                )
            ));
        });

        return renderedNodes;
    };
};

var TreeMap = function (_Component) {
    _inherits(TreeMap, _Component);

    function TreeMap() {
        _classCallCheck(this, TreeMap);

        return _possibleConstructorReturn(this, (TreeMap.__proto__ || Object.getPrototypeOf(TreeMap)).apply(this, arguments));
    }

    _createClass(TreeMap, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _TreeMapPlaceholders2.default,
                _extends({}, this.props, {
                    namespace: 'svg'
                }),
                createNodes(this.props)
            );
        }
    }]);

    return TreeMap;
}(_react.Component);

TreeMap.propTypes = _lodash2.default.omit(_TreeMapProps.treeMapPropTypes, ['children', 'namespace']);

TreeMap.defaultProps = _lodash2.default.omit(_TreeMapProps.treeMapDefaultProps, []);

exports.default = TreeMap;