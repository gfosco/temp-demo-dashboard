/*
 * This file is part of the nivo project.
 *
 * (c) 2016 Raphaël Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactMotion = require('react-motion');

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _TreeMapHelper = require('../../../lib/charts/treemap/TreeMapHelper');

var _TreeMapHelper2 = _interopRequireDefault(_TreeMapHelper);

var _propertiesConverters = require('../../../lib/propertiesConverters');

var _TreeMapProps = require('./TreeMapProps');

var _ColorUtils = require('../../../ColorUtils');

var _d = require('d3');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TreeMapPlaceholders = function (_Component) {
    _inherits(TreeMapPlaceholders, _Component);

    function TreeMapPlaceholders() {
        _classCallCheck(this, TreeMapPlaceholders);

        return _possibleConstructorReturn(this, (TreeMapPlaceholders.__proto__ || Object.getPrototypeOf(TreeMapPlaceholders)).apply(this, arguments));
    }

    _createClass(TreeMapPlaceholders, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.treemap = (0, _TreeMapHelper2.default)();
        }
    }, {
        key: 'willEnter',
        value: function willEnter(_ref) {
            var node = _ref.data;

            var width = node.x1 - node.x0;
            var height = node.y1 - node.y0;

            return _extends({
                x: node.x0 + width / 2,
                y: node.y0 + height / 2,
                width: 0,
                height: 0
            }, (0, _ColorUtils.extractRGB)(node.color));
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                root = _props.root,
                namespace = _props.namespace,
                _width = _props.width,
                _height = _props.height,
                tile = _props.tile,
                leavesOnly = _props.leavesOnly,
                innerPadding = _props.innerPadding,
                outerPadding = _props.outerPadding,
                _identity = _props.identity,
                _value = _props.value,
                animate = _props.animate,
                motionStiffness = _props.motionStiffness,
                motionDamping = _props.motionDamping,
                colors = _props.colors;


            var identity = (0, _propertiesConverters.convertGetter)(_identity);
            var value = (0, _propertiesConverters.convertGetter)(_value);

            var margin = Object.assign({}, _Nivo2.default.defaults.margin, this.props.margin);
            var width = _width - margin.left - margin.right;
            var height = _height - margin.top - margin.bottom;

            var color = (0, _ColorUtils.getColorRange)(colors);

            var wrapperTag = void 0;
            var containerTag = void 0;

            var wrapperProps = {};
            var containerProps = {};

            if (namespace === 'svg') {
                wrapperTag = 'svg';
                containerTag = 'g';

                wrapperProps.width = _width;
                wrapperProps.height = _height;
                wrapperProps.xmlns = 'http://www.w3.org/2000/svg';
                containerProps.transform = 'translate(' + margin.left + ',' + margin.top + ')';
            } else {
                wrapperTag = 'div';
                containerTag = 'div';

                wrapperProps.style = {
                    position: 'relative',
                    width: _width,
                    height: _height
                };
                containerProps.style = {
                    position: 'absolute',
                    top: margin.top,
                    left: margin.left
                };
            }

            var nodes = this.treemap.compute({
                width: width, height: height,
                root: root,
                tile: tile,
                leavesOnly: leavesOnly,
                innerPadding: innerPadding, outerPadding: outerPadding,
                identity: identity, value: value,
                color: color
            });

            console.log('————————————————————————————————');
            console.log('NODES', nodes);
            console.log('————————————————————————————————');

            if (animate === false) {
                return _react2.default.createElement(wrapperTag, wrapperProps, _react2.default.createElement(containerTag, containerProps, this.props.children(nodes.map(function (node) {
                    return {
                        key: node.data.key,
                        data: node.data,
                        style: {
                            x: node.x0,
                            y: node.y0,
                            width: node.x1 - node.x0,
                            height: node.y1 - node.y0,
                            color: node.color
                        }
                    };
                }))));
            }

            var springConfig = {
                stiffness: motionStiffness,
                damping: motionDamping
            };

            return _react2.default.createElement(wrapperTag, wrapperProps, _react2.default.createElement(
                _reactMotion.TransitionMotion,
                {
                    willEnter: this.willEnter,
                    styles: nodes.map(function (node) {
                        return {
                            key: node.data.key,
                            data: node,
                            style: _extends({
                                x: (0, _reactMotion.spring)(node.x0, springConfig),
                                y: (0, _reactMotion.spring)(node.y0, springConfig),
                                width: (0, _reactMotion.spring)(node.x1 - node.x0, springConfig),
                                height: (0, _reactMotion.spring)(node.y1 - node.y0, springConfig)
                            }, (0, _ColorUtils.extractRGB)(node.color, springConfig))
                        };
                    })
                },
                function (interpolatedStyles) {
                    return _react2.default.createElement(containerTag, containerProps, _this2.props.children(interpolatedStyles.map(function (interpolatedStyle) {
                        var _interpolatedStyle$st = interpolatedStyle.style,
                            colorR = _interpolatedStyle$st.colorR,
                            colorG = _interpolatedStyle$st.colorG,
                            colorB = _interpolatedStyle$st.colorB;

                        interpolatedStyle.style.color = 'rgb(' + Math.round(colorR) + ',' + Math.round(colorG) + ',' + Math.round(colorB) + ')';

                        interpolatedStyle.style.width = Math.max(0, interpolatedStyle.style.width);
                        interpolatedStyle.style.height = Math.max(0, interpolatedStyle.style.height);

                        return interpolatedStyle;
                    })));
                }
            ));
        }
    }]);

    return TreeMapPlaceholders;
}(_react.Component);

TreeMapPlaceholders.propTypes = _lodash2.default.omit(_TreeMapProps.treeMapPropTypes, ['orientLabels', 'skipVMin', 'transitionDuration', 'transitionEasing']);

TreeMapPlaceholders.defaultProps = _lodash2.default.omit(_TreeMapProps.treeMapDefaultProps, ['orientLabels', 'skipVMin', 'transitionDuration', 'transitionEasing']);

exports.default = TreeMapPlaceholders;