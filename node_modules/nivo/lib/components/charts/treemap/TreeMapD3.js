/*
 * This file is part of the nivo project.
 *
 * (c) 2016 RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _ColorUtils = require('../../../ColorUtils');

var _TreeMapProps = require('./TreeMapProps');

var _TreeMapD = require('../../../lib/charts/treemap/TreeMapD3');

var _TreeMapD2 = _interopRequireDefault(_TreeMapD);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function nodePosition() {
    this.style('left', function (d) {
        return d.x0 + 'px';
    }).style('top', function (d) {
        return d.y0 + 'px';
    }).style('width', function (d) {
        return Math.max(0, d.x1 - d.x0) + 'px';
    }).style('height', function (d) {
        return Math.max(0, d.y1 - d.y0) + 'px';
    });
}

var TreeMapD3 = function (_Component) {
    _inherits(TreeMapD3, _Component);

    function TreeMapD3() {
        _classCallCheck(this, TreeMapD3);

        return _possibleConstructorReturn(this, (TreeMapD3.__proto__ || Object.getPrototypeOf(TreeMapD3)).apply(this, arguments));
    }

    _createClass(TreeMapD3, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.treemap = (0, _TreeMapD2.default)();
        }
    }, {
        key: 'renderD3',
        value: function renderD3(nextProps) {
            var _props = this.props,
                root = _props.root,
                tile = _props.tile,
                orientLabels = _props.orientLabels,
                innerPadding = _props.innerPadding,
                outerPadding = _props.outerPadding,
                skipVMin = _props.skipVMin,
                identityProperty = _props.identityProperty,
                valueAccessor = _props.valueAccessor,
                labelFn = _props.labelFn,
                colors = _props.colors,
                transitionDuration = _props.transitionDuration,
                transitionEasing = _props.transitionEasing;


            var borderColorStyle = (0, _ColorUtils.getColorStyleObject)(nextProps.borderColor, 'color');

            var margin = _lodash2.default.assign({}, _Nivo2.default.defaults.margin, this.props.margin);

            var width = nextProps.width - margin.left - margin.right;
            var height = nextProps.height - margin.top - margin.bottom;

            var _nodes = this.treemap.compute({
                width: width, height: height,
                root: root,
                tile: tile,
                innerPadding: innerPadding, outerPadding: outerPadding,
                identityProperty: identityProperty, valueAccessor: valueAccessor
            });

            var element = _d2.default.select((0, _reactDom.findDOMNode)(this)).style({
                width: nextProps.width,
                height: nextProps.height
            });

            var wrapper = element.select('.nivo_treemap_wrapper').style({
                top: margin.top + 'px',
                left: margin.left + 'px',
                width: width + 'px',
                height: height + 'px'
            });

            var color = (0, _ColorUtils.getColorRange)(colors);

            var nodes = wrapper.selectAll('.nivo_treemap_node').data(_nodes);

            nodes.enter().append('div').classed('nivo_treemap_node', true).style('z-index', 10).each(function (d) {

                var p = d;
                while (p.depth > 1) {
                    p = p.parent;
                }d.color = color(p.data.name);

                var el = _d2.default.select(this);
                var label = el.append('span').attr('class', 'nivo_treemap_node_label').text(d.children ? '' : labelFn(d.data)).style('transform', function (d) {
                    if (orientLabels && d.dy > d.dx) {
                        return 'rotate(-90deg)';
                    }

                    return 'rotate(0)';
                });

                if (orientLabels) {
                    if (d.y1 - d.y0 > d.x1 - d.x0) {
                        label.style('transform', 'rotate(90deg)');
                    }
                }
            }).style(borderColorStyle).style({
                overflow: 'hidden',
                position: 'absolute',
                display: 'flex',
                'align-items': 'center',
                'justify-content': 'center'
            }).call(nodePosition).style('background', function (d) {
                return d.color;
            });

            nodes.each(function (d) {
                var p = d;
                while (p.depth > 1) {
                    p = p.parent;
                }d.color = color(p.data.name);
            }).style(borderColorStyle).transition().duration(transitionDuration).ease(transitionEasing).style('background', function (d) {
                return d.color;
            }).call(nodePosition).each(function (d) {
                var el = _d2.default.select(this);

                var transform = orientLabels && d.dy > d.dx ? 'rotate(-90deg)' : 'rotate(0deg)';

                el.select('span').style('transform', transform);
            });

            nodes.exit().style('z-index', 5).transition().duration(transitionDuration).ease(transitionEasing).style('width', '0px').style('height', '0px').style('opacity', 0).remove();
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            this.renderD3(nextProps);

            return false;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.renderD3(this.props);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: 'nivo_treemap', style: { position: 'relative' } },
                _react2.default.createElement('div', { className: 'nivo_treemap_wrapper', style: { position: 'absolute' } })
            );
        }
    }]);

    return TreeMapD3;
}(_react.Component);

TreeMapD3.propTypes = _lodash2.default.omit(_TreeMapProps.treeMapPropTypes, ['children', 'stiffness', 'damping']);
TreeMapD3.defaultProps = _lodash2.default.omit(_TreeMapProps.treeMapDefaultProps, ['stiffness', 'damping']);

exports.default = TreeMapD3;