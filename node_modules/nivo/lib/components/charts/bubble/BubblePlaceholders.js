/*
 * This file is part of the nivo project.
 *
 * (c) 2016 RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMotion = require('react-motion');

var _d = require('d3');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _ColorUtils = require('../../../ColorUtils');

var _BubbleHelper = require('../../../lib/charts/bubble/BubbleHelper');

var _BubbleHelper2 = _interopRequireDefault(_BubbleHelper);

var _propertiesConverters = require('../../../lib/propertiesConverters');

var _BubbleProps = require('./BubbleProps');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BubblePlaceholders = function (_Component) {
    _inherits(BubblePlaceholders, _Component);

    function BubblePlaceholders() {
        _classCallCheck(this, BubblePlaceholders);

        return _possibleConstructorReturn(this, (BubblePlaceholders.__proto__ || Object.getPrototypeOf(BubblePlaceholders)).apply(this, arguments));
    }

    _createClass(BubblePlaceholders, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.bubble = (0, _BubbleHelper2.default)();
        }
    }, {
        key: 'willEnter',
        value: function willEnter(_ref) {
            var node = _ref.data;

            return _extends({
                r: 0,
                x: node.x,
                y: node.y
            }, (0, _ColorUtils.extractRGB)(node.color));
        }
    }, {
        key: 'willLeave',
        value: function willLeave(styleThatLeft) {
            return {
                r: (0, _reactMotion.spring)(0),
                x: (0, _reactMotion.spring)(styleThatLeft.data.x),
                y: (0, _reactMotion.spring)(styleThatLeft.data.y)
            };
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                root = _props.root,
                leavesOnly = _props.leavesOnly,
                namespace = _props.namespace,
                _width = _props.width,
                _height = _props.height,
                _identity = _props.identity,
                _value = _props.value,
                padding = _props.padding,
                colors = _props.colors,
                animate = _props.animate,
                motionStiffness = _props.motionStiffness,
                motionDamping = _props.motionDamping,
                children = _props.children;


            var identity = (0, _propertiesConverters.convertGetter)(_identity);
            var value = (0, _propertiesConverters.convertGetter)(_value);

            var color = (0, _ColorUtils.getColorRange)(colors);

            var margin = Object.assign({}, _Nivo2.default.defaults.margin, this.props.margin);
            var width = _width - margin.left - margin.right;
            var height = _height - margin.top - margin.bottom;

            var nodes = this.bubble.compute({
                width: width,
                height: height,
                root: root,
                leavesOnly: leavesOnly,
                identity: identity, value: value,
                padding: padding,
                color: color
            });

            var wrapperTag = void 0;
            var containerTag = void 0;

            var wrapperProps = {};
            var containerProps = {};

            if (namespace === 'svg') {
                wrapperTag = 'svg';
                containerTag = 'g';

                wrapperProps.width = _width;
                wrapperProps.height = _height;
                wrapperProps.xmlns = 'http://www.w3.org/2000/svg';
                containerProps.transform = 'translate(' + margin.left + ',' + margin.top + ')';
            } else {
                wrapperTag = 'div';
                containerTag = 'div';

                wrapperProps.style = {
                    position: 'relative',
                    width: _width,
                    height: _height
                };
                containerProps.style = Object.assign({}, margin, {
                    position: 'absolute'
                });
            }

            if (animate === false) {
                return _react2.default.createElement(wrapperTag, wrapperProps, _react2.default.createElement(containerTag, containerProps, children(nodes.map(function (node) {
                    return {
                        key: node.data.key,
                        data: node,
                        style: _lodash2.default.pick(node, ['r', 'x', 'y', 'color'])
                    };
                }))));
            }

            var stiffness = motionStiffness;
            var damping = motionDamping;

            return _react2.default.createElement(wrapperTag, wrapperProps, _react2.default.createElement(
                _reactMotion.TransitionMotion,
                {
                    willEnter: this.willEnter,
                    willLeave: this.willLeave,
                    styles: nodes.map(function (b) {
                        return {
                            key: b.data.key,
                            data: b,
                            style: _extends({
                                r: (0, _reactMotion.spring)(b.r, { stiffness: stiffness, damping: damping }),
                                x: (0, _reactMotion.spring)(b.x, { stiffness: stiffness, damping: damping }),
                                y: (0, _reactMotion.spring)(b.y, { stiffness: stiffness, damping: damping })
                            }, (0, _ColorUtils.extractRGB)(b.color, { stiffness: stiffness, damping: damping }))
                        };
                    })
                },
                function (interpolatedStyles) {
                    return _react2.default.createElement(containerTag, containerProps, children(interpolatedStyles.map(function (interpolatedStyle) {
                        var _interpolatedStyle$st = interpolatedStyle.style,
                            colorR = _interpolatedStyle$st.colorR,
                            colorG = _interpolatedStyle$st.colorG,
                            colorB = _interpolatedStyle$st.colorB;

                        interpolatedStyle.style.color = 'rgb(' + Math.round(colorR) + ',' + Math.round(colorG) + ',' + Math.round(colorB) + ')';

                        return interpolatedStyle;
                    })));
                }
            ));
        }
    }]);

    return BubblePlaceholders;
}(_react.Component);

BubblePlaceholders.propTypes = _lodash2.default.omit(_BubbleProps.bubblePropTypes, ['borderWidth', 'borderColor', 'enableLabel', 'label', 'labelFormat', 'labelTextColor', 'labelSkipRadius', 'labelTextDY', 'transitionDuration', 'transitionEasing']);

BubblePlaceholders.defaultProps = _lodash2.default.omit(_BubbleProps.bubbleDefaultProps, ['borderWidth', 'borderColor', 'enableLabel', 'label', 'labelFormat', 'labelTextColor', 'labelSkipRadius', 'labelTextDY', 'transitionDuration', 'transitionEasing']);

exports.default = BubblePlaceholders;