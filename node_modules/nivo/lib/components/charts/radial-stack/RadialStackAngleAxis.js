/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _ArcUtils = require('../../../ArcUtils');

var _labels = require('../../../lib/charts/labels');

var _labels2 = _interopRequireDefault(_labels);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RadialStackAngleAxis = function (_Component) {
    _inherits(RadialStackAngleAxis, _Component);

    function RadialStackAngleAxis() {
        _classCallCheck(this, RadialStackAngleAxis);

        return _possibleConstructorReturn(this, (RadialStackAngleAxis.__proto__ || Object.getPrototypeOf(RadialStackAngleAxis)).apply(this, arguments));
    }

    _createClass(RadialStackAngleAxis, [{
        key: 'render',
        value: function render() {
            (0, _invariant2.default)(false, '<RadialStackAngleAxis> element is for RadialStack components configuration only and should not be rendered');
        }
    }], [{
        key: 'decorateRadialStack',
        value: function decorateRadialStack(_ref) {
            var _ref$props = _ref.props,
                labelPosition = _ref$props.labelPosition,
                labelRotation = _ref$props.labelRotation,
                labelOffset = _ref$props.labelOffset,
                labelPaddingX = _ref$props.labelPaddingX,
                labelPaddingY = _ref$props.labelPaddingY;


            var radialLine = _d2.default.svg.line.radial().interpolate('cardinal-closed');
            /*
                .radius(radius)
                .angle(function(d, i) { return angle(i); });
            */
            return function (_ref2) {
                var element = _ref2.element,
                    layers = _ref2.layers,
                    stacked = _ref2.stacked,
                    angle = _ref2.angle,
                    radius = _ref2.radius,
                    innerRadius = _ref2.innerRadius,
                    outerRadius = _ref2.outerRadius,
                    transitionDuration = _ref2.transitionDuration,
                    transitionEasing = _ref2.transitionEasing;

                var wrapper = element.select('.nivo_radial-axis');
                if (wrapper.node() === null) {
                    //wrapper = element.append('g')
                    wrapper = element.insert('g', ':first-child').attr('class', 'nivo_radial-axis');
                }

                /*
                radialLine.angle(d => angle(d.x));
                 const radialTicks = wrapper.selectAll('.nivo_radial-axis_circle').data([
                    { radius: innerRadius, serie: stacked[0] },
                    { radius: innerRadius + (outerRadius - innerRadius) / 2, serie: stacked[0] },
                    { radius: outerRadius, serie: stacked[0] }
                ]);
                 radialTicks.enter().append('path')
                    .attr('class', 'nivo_radial-axis_circle')
                    .attr('fill', 'none')
                    .attr('stroke', '#000')
                    .attr('d', d => radialLine.radius(d.radius)(d.serie))
                ;
                */

                var lines = wrapper.selectAll('.nivo_radial-axis_tick').data(stacked[0], function (d) {
                    return d.x;
                });

                var newLine = lines.enter().append('g').attr('class', 'nivo_radial-axis_tick').attr('transform', 'rotate(-90)');

                newLine.append('line').attr('class', 'nivo_radial-axis_tick_grid-line').attr('x1', innerRadius).attr('x2', outerRadius);

                newLine.append('g').attr('transform', 'translate(' + outerRadius + ',0)').each(function (d) {
                    var el = _d2.default.select(this);

                    el.append('g').attr('transform', function (d) {
                        return 'rotate(' + labelRotation + ')';
                    }).call((0, _labels2.default)({
                        text: d.x,
                        position: labelPosition,
                        labelOffset: labelOffset,
                        labelPaddingX: labelPaddingX,
                        labelPaddingY: labelPaddingY
                    }));
                });

                lines.transition().duration(transitionDuration).ease(transitionEasing).attr('transform', function (d) {
                    return 'rotate(' + ((0, _ArcUtils.radiansToDegrees)(angle(d.x)) - 90) + ')';
                }).each(function (d) {
                    var el = _d2.default.select(this);

                    _d2.default.transition(el.select('line')).attr('x1', innerRadius).attr('x2', outerRadius);

                    el.select('g').select('g').attr('transform', function (d) {
                        return 'rotate(' + labelRotation + ')';
                    }).call((0, _labels2.default)({
                        text: d.x,
                        position: labelPosition,
                        labelOffset: labelOffset,
                        labelPaddingX: labelPaddingX,
                        labelPaddingY: labelPaddingY
                    }));
                });
            };
        }
    }]);

    return RadialStackAngleAxis;
}(_react.Component);

var number = _react.PropTypes.number,
    string = _react.PropTypes.string;


RadialStackAngleAxis.propTypes = {
    labelPosition: string.isRequired,
    labelRotation: number.isRequired,
    labelOffset: number.isRequired,
    labelPaddingX: number.isRequired,
    labelPaddingY: number.isRequired
};

RadialStackAngleAxis.defaultProps = {
    labelPosition: _labels.LABEL_POSITION_TOP,
    labelRotation: 90,
    labelOffset: 10,
    labelPaddingX: 6,
    labelPaddingY: 2
};

exports.default = RadialStackAngleAxis;