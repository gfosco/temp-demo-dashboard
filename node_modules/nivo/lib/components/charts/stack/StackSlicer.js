/*
 * This file is part of the nivo project.
 *
 * (c) Raphaël Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var overTransitionDuration = 200;
var overTransitionEasing = 'linear';

var StackSlicer = function (_Component) {
    _inherits(StackSlicer, _Component);

    function StackSlicer() {
        _classCallCheck(this, StackSlicer);

        return _possibleConstructorReturn(this, (StackSlicer.__proto__ || Object.getPrototypeOf(StackSlicer)).apply(this, arguments));
    }

    _createClass(StackSlicer, [{
        key: 'render',
        value: function render() {
            (0, _invariant2.default)(false, '<StackSlicer> element is for Stack configuration only and should not be rendered');
        }
    }], [{
        key: 'decorateStack',
        value: function decorateStack(element) {
            var props = element.props;


            var colorFn = (0, _ColorUtils.getColorGenerator)(props.color);
            var dotBorderColorFn = (0, _ColorUtils.getColorGenerator)(props.dotBorderColor);
            var lineColorFn = (0, _ColorUtils.getColorGenerator)(props.lineColor);
            var showOnOver = props.showOnOver;

            // Receive context from Parent Stack component

            return function (_ref) {
                var wrapper = _ref.wrapper,
                    stacked = _ref.stacked,
                    width = _ref.width,
                    height = _ref.height,
                    transitionDuration = _ref.transitionDuration,
                    transitionEasing = _ref.transitionEasing;

                var slices = [];
                stacked.forEach(function (layer) {
                    layer.values.forEach(function (datum, i) {
                        if (!slices[i]) {
                            slices[i] = {
                                x: datum.interpolated.x,
                                values: []
                            };
                        }

                        slices[i].values.push(_lodash2.default.assign({}, datum, {
                            index: layer.index,
                            color: layer.color
                        }));
                    });
                });

                var elements = wrapper.selectAll('.nivo_stack_slices').data(slices);

                var newSlices = elements.enter().append('g').attr('class', 'nivo_stack_slices').attr('transform', function (d) {
                    return 'translate(' + d.x + ',0)';
                }).style('opacity', showOnOver ? 0 : 1).style('pointer-events', 'all');

                newSlices.append('rect').attr('width', props.radius * 2 + 10).attr('height', height).attr('transform', 'translate(-' + (props.radius + 5) + ',0)').style('fill', 'none').style('pointer-events', 'all');

                elements.style('opacity', showOnOver ? 0 : 1).on('mouseover', function () {
                    if (!showOnOver) {
                        return;
                    }

                    _d2.default.select(this).transition().duration(overTransitionDuration).ease(overTransitionEasing).style('opacity', 1);
                }).on('mouseout', function () {
                    if (!showOnOver) {
                        return;
                    }

                    _d2.default.select(this).transition().duration(overTransitionDuration).ease(overTransitionEasing).style('opacity', 0);
                }).transition().duration(transitionDuration).ease(transitionEasing).attr('transform', function (d) {
                    return 'translate(' + d.x + ',0)';
                });

                // —————————————————————————————————————————————————————————————————————————————————————————————————————————
                // Lines
                // —————————————————————————————————————————————————————————————————————————————————————————————————————————
                var lines = elements.selectAll('line').data(function (d) {
                    return d.values;
                }, function (d) {
                    return d.index;
                });

                // ENTER
                lines.enter().append('line').attr('y1', function (d) {
                    return d.interpolated.y;
                }).attr('y2', function (d) {
                    return d.interpolated.y0;
                }).style('stroke-width', props.lineWidth).style('stroke', lineColorFn);

                // UPDATE
                lines.transition().duration(transitionDuration).ease(transitionEasing).attr('y1', function (d) {
                    return d.interpolated.y;
                }).attr('y2', function (d) {
                    return d.interpolated.y0;
                }).style('stroke-width', props.lineWidth).style('stroke', lineColorFn);

                // EXIT
                lines.exit().transition().duration(transitionDuration).ease(transitionEasing).attr('y1', function (d) {
                    return d.interpolated.y0;
                }).attr('y2', function (d) {
                    return d.interpolated.y0;
                }).style('opacity', 0).remove();

                // —————————————————————————————————————————————————————————————————————————————————————————————————————————
                // Circles
                // —————————————————————————————————————————————————————————————————————————————————————————————————————————
                var circles = elements.selectAll('circle').data(function (d) {
                    return d.values;
                }, function (d) {
                    return d.index;
                });

                // ENTER
                circles.enter().append('circle').attr('r', 0.1).style('cursor', 'pointer').attr('transform', function (d) {
                    return 'translate(0,' + d.interpolated.y + ')';
                }).style('fill', colorFn).style('stroke-width', props.dotBorderWidth).style('stroke', dotBorderColorFn);

                // UPDATE
                circles.on('mouseover', function () {
                    _d2.default.select(this).transition().duration(overTransitionDuration).ease(overTransitionEasing).attr('r', props.radius * 2);
                }).on('mouseout', function () {
                    _d2.default.select(this).transition().duration(overTransitionDuration).ease(overTransitionEasing).attr('r', props.radius);
                }).transition().duration(transitionDuration).ease(transitionEasing).attr('r', props.radius).attr('transform', function (d) {
                    return 'translate(0,' + d.interpolated.y + ')';
                }).style('fill', colorFn).style('stroke-width', props.dotBorderWidth).style('stroke', dotBorderColorFn);

                // EXIT
                circles.exit().transition().duration(transitionDuration).ease(transitionEasing).attr('r', 0.1).style('opacity', 0).remove();
            };
        }
    }]);

    return StackSlicer;
}(_react.Component);

var number = _react.PropTypes.number,
    bool = _react.PropTypes.bool,
    any = _react.PropTypes.any;


StackSlicer.propTypes = {
    showOnOver: bool.isRequired,
    radius: number.isRequired,
    color: any.isRequired,
    dotBorderWidth: number.isRequired,
    dotBorderColor: any.isRequired,
    lineWidth: number.isRequired
};

StackSlicer.defaultProps = {
    showOnOver: false,
    radius: 4,
    color: 'inherit',
    dotBorderWidth: 1,
    dotBorderColor: 'inherit:darker(.5)',
    lineWidth: 1,
    lineColor: 'inherit:darker(.3)'
};

exports.default = StackSlicer;