/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _ArcUtils = require('../../../ArcUtils');

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PieColumnLegends = function (_Component) {
    _inherits(PieColumnLegends, _Component);

    function PieColumnLegends() {
        _classCallCheck(this, PieColumnLegends);

        return _possibleConstructorReturn(this, (PieColumnLegends.__proto__ || Object.getPrototypeOf(PieColumnLegends)).apply(this, arguments));
    }

    _createClass(PieColumnLegends, [{
        key: 'render',
        value: function render() {
            (0, _invariant2.default)(false, '<PieColumnLegends> element is for Pie configuration only and should not be rendered');
        }
    }], [{
        key: 'decoratePie',
        value: function decoratePie(element) {
            var props = element.props;


            var lineColorStyle = (0, _ColorUtils.getColorStyleObject)(props.lineColor, 'stroke');
            var textColorStyle = (0, _ColorUtils.getColorStyleObject)(props.textColor, 'fill');
            var badgeColorStyle = (0, _ColorUtils.getColorStyleObject)(props.badgeColor, 'fill');

            // Receive context from Parent Pie component
            return function (_ref) {
                var element = _ref.element,
                    previousData = _ref.previousData,
                    newData = _ref.newData,
                    identity = _ref.identity,
                    arc = _ref.arc,
                    pie = _ref.pie,
                    radius = _ref.radius,
                    transitionDuration = _ref.transitionDuration,
                    transitionEasing = _ref.transitionEasing;


                var labelFn = props.labelFn || identity;

                var outerArc = _d2.default.svg.arc().innerRadius(radius + props.radiusOffset).outerRadius(radius + props.radiusOffset);

                var lines = element.selectAll('.line').data(newData, identity);
                lines.enter().append('polyline').attr('fill', 'none').attr('class', 'line')
                //.style('opacity', 0)
                .each(function (d, i) {
                    //console.log('LINES ENTER');
                    var startingArc = (0, _ArcUtils.findNeighbor)(i, identity, previousData, newData) || d;

                    this._current = startingArc;
                });

                lines.each(function (d, i) {
                    //console.log('LINES UPDATE');
                }).transition().duration(transitionDuration).ease(transitionEasing).style(lineColorStyle).style('opacity', 1).attrTween('points', function (d) {
                    var interpolate = _d2.default.interpolate(this._current, d);

                    return function (t) {
                        var angles = interpolate(t);

                        var p0 = arc.centroid(angles);
                        var p1 = outerArc.centroid(angles);
                        var p2 = [0, p1[1]];

                        p2[0] = (radius + props.horizontalOffset) * ((0, _ArcUtils.midAngle)(angles) < Math.PI ? 1 : -1);

                        return [p0, p1, p2];
                    };
                });

                lines.exit().each(function (d) {
                    console.log('LINES EXIT', labelFn(d));
                }).remove();

                return;
                var labels = element.selectAll('.column-label').data(newData, identity);
                labels.enter().append('g').attr('class', 'column-label').attr('transform', function (d) {
                    var centroid = outerArc.centroid(d);

                    return 'translate(' + centroid[0] + ',' + centroid[1] + ')';
                }).each(function (d, i) {
                    var el = _d2.default.select(this);

                    var labelBackground = void 0;
                    if (props.badgeMode) {
                        labelBackground = el.append('rect').style(badgeColorStyle).attr({
                            rx: props.badgeBorderRadius,
                            ry: props.badgeBorderRadius
                        });
                    }

                    var labelText = el.append('text').text(labelFn).style(textColorStyle);
                    var labelBBox = labelText[0][0].getBBox();

                    console.log(labelBBox);

                    if (props.badgeMode) {
                        var badgeWidth = labelBBox.width + props.badgePaddingX * 2;
                        var badgeHeight = labelBBox.height + props.badgePaddingY * 2;

                        labelBackground.attr({
                            transform: 'translate(0,' + badgeHeight / 2 * -1 + ')',
                            width: badgeWidth,
                            height: badgeHeight
                        });

                        labelText.attr({
                            transform: 'translate(' + props.badgePaddingX + ',0)'
                        });
                    }
                })
                //.style('opacity', 0)
                .each(function (d, i) {
                    this._current = (0, _ArcUtils.findNeighbor)(i, identity, previousData, newData) || _lodash2.default.assign({}, d, { endAngle: d.startAngle });
                });

                labels.text(labelFn).transition().duration(transitionDuration).ease(transitionEasing).style(textColorStyle).style('opacity', 1).attrTween('transform', function (d) {
                    var interpolate = _d2.default.interpolate({
                        startAngle: this._current.startAngle,
                        endAngle: this._current.endAngle
                    }, d);

                    var el = _d2.default.select(this);

                    return function (t) {
                        var angles = interpolate(t);

                        el.attr('text-anchor', (0, _ArcUtils.midAngle)(angles) < Math.PI ? 'start' : 'end');

                        var centroid = outerArc.centroid(angles);
                        var position = [0, centroid[1]];

                        position[0] = (radius + props.horizontalOffset + props.textOffset) * ((0, _ArcUtils.midAngle)(angles) < Math.PI ? 1 : -1);

                        return 'translate(' + position[0] + ',' + position[1] + ')';
                    };
                });

                labels.exit().each(function (d) {
                    //console.log('EXIT', labelFn(d));
                }).remove();
            };
        }
    }]);

    return PieColumnLegends;
}(_react.Component);

var number = _react.PropTypes.number,
    string = _react.PropTypes.string,
    bool = _react.PropTypes.bool,
    func = _react.PropTypes.func,
    any = _react.PropTypes.any;


PieColumnLegends.propTypes = {
    labelFn: func,
    radiusOffset: number.isRequired,
    horizontalOffset: number.isRequired,
    textOffset: number.isRequired,
    lineColor: any.isRequired,
    textColor: any.isRequired,
    badgeMode: bool.isRequired,
    badgeColor: any.isRequired,
    badgePaddingX: number.isRequired,
    badgePaddingY: number.isRequired,
    badgeBorderRadius: number.isRequired
};

PieColumnLegends.defaultProps = {
    radiusOffset: 16,
    horizontalOffset: 30,
    textOffset: 10,
    lineColor: 'none',
    textColor: 'none',
    badgeMode: true,
    badgeColor: 'none',
    badgePaddingX: 7,
    badgePaddingY: 3,
    badgeBorderRadius: 2
};

exports.default = PieColumnLegends;