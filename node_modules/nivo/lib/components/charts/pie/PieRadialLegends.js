/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _ArcUtils = require('../../../ArcUtils');

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PieRadialLegends = function (_Component) {
    _inherits(PieRadialLegends, _Component);

    function PieRadialLegends() {
        _classCallCheck(this, PieRadialLegends);

        return _possibleConstructorReturn(this, (PieRadialLegends.__proto__ || Object.getPrototypeOf(PieRadialLegends)).apply(this, arguments));
    }

    _createClass(PieRadialLegends, [{
        key: 'render',
        value: function render() {
            (0, _invariant2.default)(false, '<PieRadialLegends> element is for Pie configuration only and should not be rendered');
        }
    }], [{
        key: 'decoratePie',
        value: function decoratePie(element) {
            var props = element.props;


            var color = (0, _ColorUtils.getColorGenerator)(props.textColor);

            return function (_ref) {
                var element = _ref.element,
                    arc = _ref.arc,
                    identity = _ref.identity,
                    pie = _ref.pie,
                    newData = _ref.newData,
                    radius = _ref.radius;

                var labelFn = props.labelFn || identity;

                var outerArc = _d2.default.svg.arc().innerRadius(radius + props.radiusOffset).outerRadius(radius + props.radiusOffset);

                var labels = element.selectAll('.radial-label').data(newData, identity);
                labels.enter().append('g').attr('class', 'radial-label').append('text').style('opacity', 0);

                labels.each(function (d) {
                    var el = _d2.default.select(this);

                    var angle = (0, _ArcUtils.midAngle)(d);
                    var angleOffset = angle < Math.PI ? -90 : 90;

                    var styles = { opacity: 1 };
                    if (color !== 'none') {
                        styles.fill = color(d);
                    }

                    el.select('text').text(labelFn).attr('text-anchor', function (d) {
                        return (0, _ArcUtils.midAngle)(d) < Math.PI ? 'start' : 'end';
                    }).transition().duration(props.transitionDuration).ease(props.transitionEasing).style(styles).attr('transform', 'translate(' + (radius + props.radiusOffset) + ', 0)');
                }).transition().duration(props.transitionDuration).ease(props.transitionEasing).attr('transform', function (d) {
                    var angle = (0, _ArcUtils.midAngle)(d);

                    return 'rotate(' + (0, _ArcUtils.radiansToDegrees)(angle) + ', 0, 0)';
                });
                labels.exit().each(function (d) {
                    var el = _d2.default.select(this);

                    el.select('text').transition().duration(props.transitionDuration).ease(props.transitionEasing).style('opacity', 0).attr('transform', 'translate(' + (radius + props.radiusOffset + 50) + ', 0)');
                }).transition().duration(0).delay(props.transitionDuration).remove();

                /*
                labels.enter()
                    .append('text')
                    .attr('class', 'radial-label')
                ;
                labels
                    .text(labelFn)
                    .attr('text-anchor', d => {
                        return midAngle(d) < Math.PI ? 'start' : 'end';
                    })
                    .transition()
                    .duration(props.transitionDuration)
                    .ease(props.transitionEasing)
                    .attr('transform', d => {
                        const centroid = outerArc.centroid(d);
                        const angle    = midAngle(d);
                         const angleOffset = angle < Math.PI ? -90 : 90;
                         return `translate(${centroid[0]}, ${centroid[1]}) rotate(${radiansToDegrees(angle) + angleOffset}, 0, 0)`;
                    })
                ;
                labels.exit()
                    .transition()
                    .duration(props.transitionDuration)
                    .ease(props.transitionEasing)
                    .style('opacity', 0)
                    .remove()
                ;
                */
            };
        }
    }]);

    return PieRadialLegends;
}(_react.Component);

var number = _react.PropTypes.number,
    string = _react.PropTypes.string,
    func = _react.PropTypes.func,
    any = _react.PropTypes.any;


PieRadialLegends.propTypes = {
    labelFn: func,
    radiusOffset: number.isRequired,
    transitionDuration: number.isRequired,
    transitionEasing: string.isRequired,
    textColor: any.isRequired
};

PieRadialLegends.defaultProps = {
    radiusOffset: 16,
    transitionDuration: _Nivo2.default.defaults.transitionDuration,
    transitionEasing: _Nivo2.default.defaults.transitionEasing,
    textColor: 'none'
};

exports.default = PieRadialLegends;