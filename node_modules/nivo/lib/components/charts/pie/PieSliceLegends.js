/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _ArcUtils = require('../../../ArcUtils');

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PieSliceLegends = function (_Component) {
    _inherits(PieSliceLegends, _Component);

    function PieSliceLegends() {
        _classCallCheck(this, PieSliceLegends);

        return _possibleConstructorReturn(this, (PieSliceLegends.__proto__ || Object.getPrototypeOf(PieSliceLegends)).apply(this, arguments));
    }

    _createClass(PieSliceLegends, [{
        key: 'render',
        value: function render() {
            (0, _invariant2.default)(false, '<PieSliceLegends> element is for Pie configuration only and should not be rendered');
        }
    }], [{
        key: 'decoratePie',
        value: function decoratePie(element) {
            var props = element.props;


            var badgeColorStyle = (0, _ColorUtils.getColorStyleObject)(props.badgeColor, 'fill');
            var textColorStyle = (0, _ColorUtils.getColorStyleObject)(props.textColor, 'fill');

            return function (_ref) {
                var element = _ref.element,
                    identity = _ref.identity,
                    arc = _ref.arc,
                    previousData = _ref.previousData,
                    newData = _ref.newData;

                var legends = element.selectAll('.slice-legend').data(newData, identity);

                var labelFn = props.labelFn || identity;

                legends.enter().append('g').attr('class', 'slice-legend').attr('transform', function (d) {
                    var centroid = arc.centroid(d);

                    return 'translate(' + centroid[0] + ', ' + centroid[1] + ')';
                }).style('opacity', 0).each(function (d, i) {
                    this._current = (0, _ArcUtils.findNeighbor)(i, identity, previousData, newData) || _lodash2.default.assign({}, d, { endAngle: d.startAngle });
                    var el = _d2.default.select(this);

                    el.append('circle').attr('r', props.radius);

                    el.append('text').attr('text-anchor', 'middle');
                });

                legends.each(function (d) {
                    _d2.default.select(this).select('circle').style(badgeColorStyle);

                    _d2.default.select(this).select('text').style(textColorStyle).text(labelFn(d));
                }).transition().duration(props.transitionDuration).ease(props.transitionEasing).style('opacity', 1).attrTween('transform', function (d) {
                    var interpolate = _d2.default.interpolate({
                        startAngle: this._current.startAngle,
                        endAngle: this._current.endAngle
                    }, d);

                    return function (t) {
                        var angles = interpolate(t);
                        var centroid = arc.centroid(angles);

                        var transform = 'translate(' + centroid[0] + ', ' + centroid[1] + ')';
                        if (props.orient) {
                            var angle = (0, _ArcUtils.midAngle)(angles);
                            transform = transform + ' rotate(' + (0, _ArcUtils.radiansToDegrees)(angle) + ', 0, 0)';
                        }

                        return transform;
                    };
                });

                legends.exit().transition().duration(props.transitionDuration).ease(props.transitionEasing).style('opacity', 0).remove();
            };
        }
    }]);

    return PieSliceLegends;
}(_react.Component);

var number = _react.PropTypes.number,
    string = _react.PropTypes.string,
    bool = _react.PropTypes.bool,
    func = _react.PropTypes.func,
    any = _react.PropTypes.any;


PieSliceLegends.propTypes = {
    labelFn: func,
    radius: number.isRequired,
    orient: bool.isRequired,
    transitionDuration: number.isRequired,
    transitionEasing: string.isRequired,
    badgeColor: any.isRequired,
    textColor: any.isRequired
};

PieSliceLegends.defaultProps = {
    radius: 12,
    orient: true,
    transitionDuration: _Nivo2.default.defaults.transitionDuration,
    transitionEasing: _Nivo2.default.defaults.transitionEasing,
    badgeColor: 'none',
    textColor: 'none'
};

exports.default = PieSliceLegends;