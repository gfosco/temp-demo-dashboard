/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _Nivo = require('../../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _ArcUtils = require('../../../ArcUtils');

var _ColorUtils = require('../../../ColorUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pie = function (_Component) {
    _inherits(Pie, _Component);

    function Pie() {
        _classCallCheck(this, Pie);

        return _possibleConstructorReturn(this, (Pie.__proto__ || Object.getPrototypeOf(Pie)).apply(this, arguments));
    }

    _createClass(Pie, [{
        key: 'renderD3',
        value: function renderD3(nextProps) {
            var data = nextProps.data,
                width = nextProps.width,
                height = nextProps.height,
                sort = nextProps.sort,
                keyProp = nextProps.keyProp,
                valueProp = nextProps.valueProp,
                startAngle = nextProps.startAngle,
                endAngle = nextProps.endAngle,
                padAngle = nextProps.padAngle,
                colors = nextProps.colors,
                innerRadius = nextProps.innerRadius,
                transitionDuration = nextProps.transitionDuration,
                transitionEasing = nextProps.transitionEasing;


            var identity = function identity(d) {
                return d.data[keyProp];
            };

            var element = _d2.default.select((0, _reactDom.findDOMNode)(this));
            var container = element.select('.nivo_pie_slices');

            element.attr('transform', 'translate(' + width / 2 + ', ' + height / 2 + ')');

            var pie = _d2.default.layout.pie().sort(sort).value(function (d) {
                return d[valueProp];
            }).startAngle((0, _ArcUtils.degreesToRadians)(startAngle)).endAngle((0, _ArcUtils.degreesToRadians)(endAngle)).padAngle((0, _ArcUtils.degreesToRadians)(padAngle));

            var radius = Math.min(width / 2, height / 2);
            var arc = _d2.default.svg.arc().outerRadius(radius).innerRadius(radius * innerRadius);

            var outline = element.select('.nivo_pie_outline').attr('d', arc({
                startAngle: (0, _ArcUtils.degreesToRadians)(startAngle),
                endAngle: (0, _ArcUtils.degreesToRadians)(endAngle)
            }));

            var color = (0, _ColorUtils.getColorRange)(colors);

            var slices = container.selectAll('.nivo_pie_slice');
            var previousData = slices.data();
            var newData = pie(data.map(function (d, i) {
                if (!d.color) {
                    d.color = color(i);
                }

                return d;
            }));

            function arcTween(a) {
                var i = _d2.default.interpolate(this._current, a);
                this._current = i(0);

                return function (t) {
                    return arc(i(t));
                };
            }

            slices = slices.data(newData, identity);
            slices.enter().append('path').attr('class', 'nivo_pie_slice').style('fill', function (d) {
                return d.data.color;
            }).each(function (d, i) {
                this._current = (0, _ArcUtils.findNeighbor)(i, identity, previousData, newData) || _lodash2.default.assign({}, d, { endAngle: d.startAngle });
            });
            slices.exit().datum(function (d, i) {
                return (0, _ArcUtils.findNeighbor)(i, identity, newData, previousData) || d;
            }).transition().duration(transitionDuration).ease(transitionEasing).attrTween('d', arcTween).remove();
            slices.transition().duration(transitionDuration).ease(transitionEasing).attrTween('d', arcTween).style('fill', function (d) {
                return d.data.color;
            });

            var pieContext = {
                element: element,
                pie: pie,
                arc: arc, radius: radius,
                identity: identity,
                previousData: previousData, newData: newData
            };

            this.legends.forEach(function (legend) {
                legend(pieContext);
            });
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            this.renderD3(nextProps);

            return false;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.renderD3(this.props);
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            var children = this.props.children;


            var legends = [];

            _react2.default.Children.forEach(children, function (element) {
                if (_react2.default.isValidElement(element)) {
                    if (element.type.createLegendsFromReactElement) {
                        legends.push(element.type.createLegendsFromReactElement(element));
                    }
                }
            });

            this.legends = legends;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'g',
                null,
                _react2.default.createElement('path', { className: 'nivo_pie_outline' }),
                _react2.default.createElement('g', { className: 'nivo_pie_slices' })
            );
        }
    }]);

    return Pie;
}(_react.Component);

var array = _react.PropTypes.array,
    number = _react.PropTypes.number,
    string = _react.PropTypes.string,
    func = _react.PropTypes.func,
    any = _react.PropTypes.any;


Pie.propTypes = {
    width: number.isRequired,
    height: number.isRequired,
    sort: func,
    data: array.isRequired,
    keyProp: string.isRequired,
    valueProp: string.isRequired,
    startAngle: number.isRequired,
    endAngle: number.isRequired,
    padAngle: number.isRequired,
    colors: any.isRequired,
    transitionDuration: number.isRequired,
    transitionEasing: string.isRequired,
    innerRadius: number.isRequired
};

Pie.defaultProps = {
    sort: null,
    keyProp: 'label',
    valueProp: 'value',
    startAngle: 0,
    endAngle: 360,
    padAngle: 0,
    transitionDuration: _Nivo2.default.defaults.transitionDuration,
    transitionEasing: _Nivo2.default.defaults.transitionEasing,
    innerRadius: 0,
    colors: _Nivo2.default.defaults.colorRange
};

exports.default = Pie;