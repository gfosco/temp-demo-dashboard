/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AxisY = function (_Component) {
    _inherits(AxisY, _Component);

    function AxisY() {
        _classCallCheck(this, AxisY);

        return _possibleConstructorReturn(this, (AxisY.__proto__ || Object.getPrototypeOf(AxisY)).apply(this, arguments));
    }

    _createClass(AxisY, [{
        key: 'renderD3',
        value: function renderD3(props) {
            var yScale = props.yScale,
                tickCount = props.tickCount,
                tickFormat = props.tickFormat,
                orient = props.orient,
                tickMode = props.tickMode,
                tickPadding = props.tickPadding,
                width = props.width,
                transitionDuration = props.transitionDuration,
                transitionEasing = props.transitionEasing;


            var element = _d2.default.select((0, _reactDom.findDOMNode)(this));

            var axis = _d2.default.svg.axis().scale(yScale).tickPadding(tickPadding).orient(orient).tickFormat(_d2.default.format('s'));

            if (tickCount >= 0) {
                axis.ticks(tickCount);
            }

            if (tickFormat) {
                axis.tickFormat(_d2.default.format(tickFormat));
            }

            if (tickMode === 'grid') {
                axis.tickSize(-width);
            }

            element.transition().duration(transitionDuration).ease(transitionEasing).call(axis);

            return false;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.renderD3(this.props);
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            this.renderD3(nextProps);

            return false;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement('g', { className: 'chart__axis chart__axis--y' });
        }
    }]);

    return AxisY;
}(_react.Component);

AxisY.displayName = 'AxisY';

AxisY.propTypes = {
    orient: _react.PropTypes.oneOf(['left', 'right']).isRequired,
    yScale: _react.PropTypes.func.isRequired,
    tickCount: _react.PropTypes.number.isRequired,
    tickMode: _react.PropTypes.oneOf(['normal', 'grid']).isRequired,
    tickPadding: _react.PropTypes.number.isRequired
};

AxisY.defaultProps = {
    orient: 'left',
    transitionDuration: 600,
    transitionEasing: 'cubic-out',
    tickCount: -1,
    tickMode: 'normal',
    tickPadding: 3
};

exports.default = AxisY;