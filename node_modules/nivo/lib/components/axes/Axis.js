/*
 * This file is part of the nivo project.
 *
 * (c) 2016 RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMotion = require('react-motion');

var _d = require('d3');

var _Nivo = require('../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _AxisTick = require('./AxisTick');

var _AxisTick2 = _interopRequireDefault(_AxisTick);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var center = function center(scale) {
    var offset = scale.bandwidth() / 2;
    if (scale.round()) offset = Math.round(offset);

    return function (d) {
        return scale(d) + offset;
    };
};

var Axis = function (_Component) {
    _inherits(Axis, _Component);

    function Axis() {
        _classCallCheck(this, Axis);

        return _possibleConstructorReturn(this, (Axis.__proto__ || Object.getPrototypeOf(Axis)).apply(this, arguments));
    }

    _createClass(Axis, [{
        key: 'willEnter',
        value: function willEnter() {
            return {
                opacity: 0,
                x: 0,
                y: 0
            };
        }
    }, {
        key: 'willLeave',
        value: function willLeave(styleThatLeft) {
            var style = styleThatLeft.style;


            return {
                opacity: (0, _reactMotion.spring)(0),
                x: (0, _reactMotion.spring)(style.x.val),
                y: (0, _reactMotion.spring)(style.y.val)
            };
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                scales = _props.scales,
                scaleId = _props.scaleId,
                width = _props.width,
                height = _props.height,
                _position = _props.position,
                _orient = _props.orient,
                tickSize = _props.tickSize,
                tickPadding = _props.tickPadding,
                format = _props.format,
                _legend = _props.legend,
                legendPosition = _props.legendPosition,
                legendOffset = _props.legendOffset,
                animate = _props.animate,
                motionStiffness = _props.motionStiffness,
                motionDamping = _props.motionDamping;
            var theme = this.context.nivoTheme;


            var scale = scales[scaleId];

            var values = void 0;
            if (scale.ticks) {
                values = scale.ticks();
            } else {
                values = scale.domain();
            }

            var orient = _orient || _position;
            var position = scale.bandwidth ? center(scale) : scale;

            var x = 0;
            var y = 0;
            var translate = void 0;
            var textAnchor = void 0;
            var textDY = void 0;
            var tickLine = { x2: 0, y2: 0 };
            var textXY = { x: 0, y: 0 };

            if (['top', 'bottom'].includes(orient)) {
                translate = function translate(d) {
                    return { x: position(d), y: 0 };
                };

                textAnchor = 'middle';
                textDY = orient === 'top' ? '0em' : '0.71em';
                textXY.y = (tickSize + tickPadding) * (orient === 'bottom' ? 1 : -1);

                tickLine.y2 = tickSize * (orient === 'bottom' ? 1 : -1);

                if (orient === 'bottom') y = height;
            } else if (['left', 'right'].includes(orient)) {
                translate = function translate(d) {
                    return { x: 0, y: position(d) };
                };

                textAnchor = orient === 'left' ? 'end' : 'start';
                textDY = '0.32em';
                textXY.x = (tickSize + tickPadding) * (orient === 'right' ? 1 : -1);

                tickLine.x2 = tickSize * (orient === 'right' ? 1 : -1);

                if (orient === 'right') x = width;
            }

            var legend = null;
            if (_legend !== undefined) {
                var legendX = 0;
                var legendY = 0;
                var legendRotation = 0;
                var _textAnchor = void 0;

                if (['left', 'right'].includes(_position)) {
                    legendRotation = -90;
                    legendX = legendOffset;
                    if (legendPosition === 'start') {
                        _textAnchor = 'start';
                        legendY = height;
                    } else if (legendPosition === 'center') {
                        _textAnchor = 'middle';
                        legendY = height / 2;
                    } else if (legendPosition === 'end') {
                        _textAnchor = 'end';
                    }
                } else {
                    legendY = legendOffset;
                    if (legendPosition === 'start') {
                        _textAnchor = 'start';
                    } else if (legendPosition === 'center') {
                        _textAnchor = 'middle';
                        legendX = width / 2;
                    } else if (legendPosition === 'end') {
                        _textAnchor = 'end';
                        legendX = width;
                    }
                }

                legend = _react2.default.createElement(
                    'text',
                    {
                        fill: theme.axis.legendColor,
                        transform: 'translate(' + legendX + ', ' + legendY + ') rotate(' + legendRotation + ')',
                        textAnchor: _textAnchor,
                        style: { fontSize: theme.axis.legendFontSize }
                    },
                    _legend
                );
            }

            var ticks = values.map(function (v) {
                return _extends({
                    key: v
                }, translate(v));
            });

            var springConfig = {
                stiffness: motionStiffness,
                damping: motionDamping
            };

            return _react2.default.createElement(
                'g',
                { transform: 'translate(' + x + ',' + y + ')' },
                legend,
                _react2.default.createElement(
                    _reactMotion.TransitionMotion,
                    {
                        willEnter: this.willEnter,
                        willLeave: this.willLeave,
                        styles: ticks.map(function (tick) {
                            return {
                                key: '' + tick.key,
                                data: tick.key,
                                style: {
                                    opacity: (0, _reactMotion.spring)(1, springConfig),
                                    x: (0, _reactMotion.spring)(tick.x, springConfig),
                                    y: (0, _reactMotion.spring)(tick.y, springConfig)
                                }
                            };
                        })
                    },
                    function (interpolatedStyles) {
                        return _react2.default.createElement(
                            'g',
                            null,
                            interpolatedStyles.map(function (interpolatedStyle) {
                                var key = interpolatedStyle.key,
                                    style = interpolatedStyle.style;

                                return _react2.default.createElement(_AxisTick2.default, _extends({
                                    key: key,
                                    value: key,
                                    format: format,
                                    tickLine: tickLine,
                                    textXY: textXY,
                                    textDY: textDY,
                                    textAnchor: textAnchor
                                }, style));
                            })
                        );
                    }
                )
            );
        }
    }]);

    return Axis;
}(_react.Component);

Axis.propTypes = {
    orient: _react.PropTypes.oneOf(['top', 'right', 'bottom', 'left']),
    position: _react.PropTypes.oneOf(['top', 'right', 'bottom', 'left']).isRequired,
    scales: _react.PropTypes.object.isRequired,
    scaleId: _react.PropTypes.string.isRequired,
    // ticks
    tickSize: _react.PropTypes.number.isRequired,
    tickPadding: _react.PropTypes.number.isRequired,
    format: _react.PropTypes.func,
    // legend
    legend: _react.PropTypes.string,
    legendPosition: _react.PropTypes.oneOf(['start', 'center', 'end']).isRequired,
    legendOffset: _react.PropTypes.number.isRequired,
    // motion
    animate: _react.PropTypes.bool.isRequired,
    motionStiffness: _react.PropTypes.number.isRequired,
    motionDamping: _react.PropTypes.number.isRequired
};
Axis.defaultProps = {
    scales: {},
    // ticks
    tickSize: 5,
    tickPadding: 5,
    // legend
    legendPosition: 'end',
    legendOffset: 0,
    // motion
    animate: true,
    motionStiffness: _Nivo2.default.defaults.motionStiffness,
    motionDamping: _Nivo2.default.defaults.motionDamping
};
Axis.contextTypes = {
    nivoTheme: _react.PropTypes.object.isRequired
};
exports.default = Axis;