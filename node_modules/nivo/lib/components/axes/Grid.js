/*
 * This file is part of the nivo project.
 *
 * (c) 2016 RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Nivo = require('../../Nivo');

var _Nivo2 = _interopRequireDefault(_Nivo);

var _GridLines = require('./GridLines');

var _GridLines2 = _interopRequireDefault(_GridLines);

var _GridLine = require('./GridLine');

var _GridLine2 = _interopRequireDefault(_GridLine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var center = function center(scale) {
    var offset = scale.bandwidth() / 2;
    if (scale.round()) offset = Math.round(offset);

    return function (d) {
        return scale(d) + offset;
    };
};

var Grid = function (_Component) {
    _inherits(Grid, _Component);

    function Grid() {
        _classCallCheck(this, Grid);

        return _possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).apply(this, arguments));
    }

    _createClass(Grid, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                width = _props.width,
                height = _props.height,
                scales = _props.scales,
                _xScale = _props.xScale,
                _yScale = _props.yScale,
                animate = _props.animate,
                motionStiffness = _props.motionStiffness,
                motionDamping = _props.motionDamping;


            var xLines = void 0;
            if (_xScale !== undefined) {
                (function () {
                    var xScale = scales[_xScale];

                    var xValues = void 0;
                    if (xScale.ticks) {
                        xValues = xScale.ticks();
                    } else {
                        xValues = xScale.domain();
                    }

                    var xPosition = xScale.bandwidth ? center(xScale) : xScale;

                    xLines = xValues.map(function (v) {
                        return {
                            key: '' + v,
                            x1: xPosition(v),
                            x2: xPosition(v),
                            y2: height
                        };
                    });
                })();
            }

            var yLines = void 0;
            if (_yScale !== undefined) {
                (function () {
                    var yScale = scales[_yScale];

                    var yValues = void 0;
                    if (yScale.ticks) {
                        yValues = yScale.ticks();
                    } else {
                        yValues = yScale.domain();
                    }

                    var yPosition = yScale.bandwidth ? center(yScale) : yScale;

                    yLines = yValues.map(function (v) {
                        return {
                            key: '' + v,
                            x2: width,
                            y1: yPosition(v),
                            y2: yPosition(v)
                        };
                    });
                })();
            }

            return _react2.default.createElement(
                'g',
                null,
                xLines && _react2.default.createElement(_GridLines2.default, {
                    type: 'x',
                    lines: xLines,
                    animate: animate,
                    motionStiffness: motionStiffness,
                    motionDamping: motionDamping
                }),
                yLines && _react2.default.createElement(_GridLines2.default, {
                    type: 'y',
                    lines: yLines,
                    animate: animate,
                    motionStiffness: motionStiffness,
                    motionDamping: motionDamping
                })
            );
        }
    }]);

    return Grid;
}(_react.Component);

Grid.propTypes = {
    width: _react.PropTypes.number,
    height: _react.PropTypes.number,
    scales: _react.PropTypes.object.isRequired,
    xScale: _react.PropTypes.string,
    yScale: _react.PropTypes.string,
    // motion
    animate: _react.PropTypes.bool.isRequired,
    motionStiffness: _react.PropTypes.number.isRequired,
    motionDamping: _react.PropTypes.number.isRequired
};
Grid.defaultProps = {
    scales: {},
    // motion
    animate: true,
    motionStiffness: _Nivo2.default.defaults.motionStiffness,
    motionDamping: _Nivo2.default.defaults.motionDamping
};
exports.default = Grid;