/*
 * This file is part of the nivo project.
 *
 * (c) RaphaÃ«l Benitte
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getColorRange = exports.nivoCategoricalColors = exports.extractRGB = exports.getColorStyleObject = exports.getColorGenerator = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactMotion = require('react-motion');

var _d = require('d3');

var _d3ScaleChromatic = require('d3-scale-chromatic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getColorGenerator = exports.getColorGenerator = function getColorGenerator(instruction) {
    if (instruction === 'none') {
        return 'none';
    }

    if (_lodash2.default.isFunction(instruction)) {
        return instruction;
    }

    if (instruction === 'inherit') {
        return function (d) {
            return d.color || d.data.color;
        };
    }

    var inheritMatches = instruction.match(/inherit:(darker|brighter)\(([0-9.]+)\)/);
    if (inheritMatches) {
        var _ret = function () {
            var method = inheritMatches[1];
            var amount = inheritMatches[2];

            return {
                v: function v(d) {
                    return (0, _d.rgb)(d.color || d.data.color)[method](parseFloat(amount));
                }
            };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }

    return instruction;
};

var getColorStyleObject = exports.getColorStyleObject = function getColorStyleObject(instruction, property) {
    var style = {};

    var color = getColorGenerator(instruction);
    if (color !== 'none') {
        style[property] = color;
    }

    return style;
};

var extractRGB = exports.extractRGB = function extractRGB(_color, springConfig) {
    var color = (0, _d.rgb)(_color);

    if (!springConfig) {
        return {
            colorR: color.r,
            colorG: color.g,
            colorB: color.b
        };
    }

    return {
        colorR: (0, _reactMotion.spring)(color.r, Object.assign({}, springConfig, { precision: 1 })),
        colorG: (0, _reactMotion.spring)(color.g, Object.assign({}, springConfig, { precision: 1 })),
        colorB: (0, _reactMotion.spring)(color.b, Object.assign({}, springConfig, { precision: 1 }))
    };
};

var d3Colors = {
    d310: (0, _d.scaleOrdinal)(_d.schemeCategory10),
    d320: (0, _d.scaleOrdinal)(_d.schemeCategory20),
    d320b: (0, _d.scaleOrdinal)(_d.schemeCategory20b),
    d320c: (0, _d.scaleOrdinal)(_d.schemeCategory20c),
    accent: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemeAccent),
    dark2: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemeDark2),
    paired: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemePaired),
    pastel1: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemePastel1),
    pastel2: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemePastel2),
    set1: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemeSet1),
    set2: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemeSet2),
    set3: (0, _d.scaleOrdinal)(_d3ScaleChromatic.schemeSet3)
};

var nivoCategoricalColors = exports.nivoCategoricalColors = function nivoCategoricalColors() {
    return (0, _d.scaleOrdinal)(['#e8c1a0', '#f47560', '#f1e15b', '#e8a838', '#61cdbb', '#97e3d5']);
};

var dataColor = function dataColor(d) {
    return d.color || d.data.color;
};

var getColorRange = exports.getColorRange = function getColorRange(instruction) {
    if (instruction === 'data') {
        return dataColor;
    }

    if (instruction === 'nivo') {
        return nivoCategoricalColors();
    }

    if (_lodash2.default.isFunction(instruction)) {
        return instruction;
    }

    if (d3Colors[instruction]) {
        return d3Colors[instruction];
    }

    if (_lodash2.default.isArray(instruction)) {
        return (0, _d.scaleOrdinal)(instruction);
    }

    throw new Error('Unable to determine color range');
};