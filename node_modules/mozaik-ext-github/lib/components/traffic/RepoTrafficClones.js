'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RepoTrafficClonesHistogramChart = require('./charts/RepoTrafficClonesHistogramChart');

var _RepoTrafficClonesHistogramChart2 = _interopRequireDefault(_RepoTrafficClonesHistogramChart);

var _RepoTrafficClonesLineChart = require('./charts/RepoTrafficClonesLineChart');

var _RepoTrafficClonesLineChart2 = _interopRequireDefault(_RepoTrafficClonesLineChart);

var _ui = require('mozaik/ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RepoTrafficClones = function (_Component) {
    _inherits(RepoTrafficClones, _Component);

    function RepoTrafficClones() {
        _classCallCheck(this, RepoTrafficClones);

        return _possibleConstructorReturn(this, (RepoTrafficClones.__proto__ || Object.getPrototypeOf(RepoTrafficClones)).apply(this, arguments));
    }

    _createClass(RepoTrafficClones, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                repository = _props.repository,
                title = _props.title,
                type = _props.type,
                apiData = _props.apiData,
                apiError = _props.apiError;


            var countNode = null;
            var body = _react2.default.createElement(_ui.WidgetLoader, null);
            if (apiData !== undefined) {
                var count = apiData.count,
                    uniques = apiData.uniques,
                    clones = apiData.clones;


                countNode = _react2.default.createElement(
                    'span',
                    null,
                    count,
                    ' clones - ',
                    uniques,
                    ' unique clones'
                );

                if (type === 'histogram') {
                    body = _react2.default.createElement(_RepoTrafficClonesHistogramChart2.default, { clones: clones });
                } else if (type === 'line') {
                    body = _react2.default.createElement(_RepoTrafficClonesLineChart2.default, { clones: clones });
                }
            }

            return _react2.default.createElement(
                _ui.Widget,
                null,
                _react2.default.createElement(_ui.WidgetHeader, {
                    title: title || 'Clones',
                    subject: title ? null : repository,
                    count: countNode,
                    icon: 'line-chart'
                }),
                _react2.default.createElement(
                    _ui.WidgetBody,
                    { style: { overflowY: 'hidden' } },
                    _react2.default.createElement(
                        _ui.TrapApiError,
                        { error: apiError },
                        body
                    )
                )
            );
        }
    }], [{
        key: 'getApiRequest',
        value: function getApiRequest(_ref) {
            var repository = _ref.repository;

            return {
                id: 'github.trafficClones.' + repository,
                params: { repository: repository }
            };
        }
    }]);

    return RepoTrafficClones;
}(_react.Component);

RepoTrafficClones.propTypes = {
    repository: _react.PropTypes.string.isRequired,
    title: _react.PropTypes.string,
    apiData: _react.PropTypes.any,
    apiError: _react.PropTypes.object,
    type: _react.PropTypes.oneOf(['histogram', 'line']).isRequired
};
RepoTrafficClones.defaultProps = {
    type: 'histogram'
};
exports.default = RepoTrafficClones;