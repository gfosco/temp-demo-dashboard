'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ui = require('mozaik/ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RepoBadge = function (_Component) {
    _inherits(RepoBadge, _Component);

    function RepoBadge() {
        _classCallCheck(this, RepoBadge);

        return _possibleConstructorReturn(this, (RepoBadge.__proto__ || Object.getPrototypeOf(RepoBadge)).apply(this, arguments));
    }

    _createClass(RepoBadge, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                repository = _props.repository,
                title = '',
                repoInfo = _props.apiData,
                apiError = _props.apiError;


            var body = _react2.default.createElement(_ui.WidgetLoader, null);
            if (repoInfo) {
                var labelStyle = { width: '48%', marginBottom: '1vmin', fontSize: '1.3em' };

                body = _react2.default.createElement(
                    'div',
                    {
                        style: {
                            padding: '1.6vmin',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'stretch',
                            alignContent: 'stretch',
                            flexDirection: 'column'
                        }
                    },
                    _react2.default.createElement(
                        'div',
                        {
                            style: {
                                padding: '2vmin 0',
                                textAlign: 'center',
                                fontSize: '4em'
                            }
                        },
                        _props.title
                    ),   
                    _react2.default.createElement(
                        'hr',
                        {
                            style: {
                                width: '90%',
                                textAlign: 'center'
                            }
                        }
                        
                    ),                                       
                    _react2.default.createElement(
                        'div',
                        {
                            style: {
                                padding: '2vmin 0',
                                textAlign: 'center',
                                fontSize: '2em'
                            }
                        },
                        repoInfo.description
                    ),
                    _react2.default.createElement(
                        'div',
                        {
                            style: {
                                display: 'flex',
                                flexWrap: 'wrap',
                                justifyContent: 'space-between'
                            }
                        },
                        _react2.default.createElement(_ui.WidgetLabel, {
                            label: 'Issues',
                            suffix: repoInfo.open_issues_count,
                            style: labelStyle
                        }),
                        _react2.default.createElement(_ui.WidgetLabel, {
                            label: 'Stars',
                            suffix: repoInfo.watchers_count,
                            style: labelStyle
                        }),
                        _react2.default.createElement(_ui.WidgetLabel, {
                            label: 'Subscribers',
                            suffix: repoInfo.subscribers_count,
                            style: labelStyle
                        }),
                        _react2.default.createElement(_ui.WidgetLabel, {
                            label: 'Forks',
                            suffix: repoInfo.forks_count,
                            style: labelStyle
                        })                    )
                );
            }

            return _react2.default.createElement(
                _ui.Widget,
                null,
                _react2.default.createElement(_ui.WidgetHeader, {
                    title: title || 'Repository',
                    subject: title ? null : repository,
                    icon: 'github-alt'
                }),
                _react2.default.createElement(
                    _ui.WidgetBody,
                    null,
                    _react2.default.createElement(
                        _ui.TrapApiError,
                        { error: apiError },
                        body
                    )
                )
            );
        }
    }], [{
        key: 'getApiRequest',
        value: function getApiRequest(_ref) {
            var repository = _ref.repository;

            return {
                id: 'github.repository.' + repository,
                params: { repository: repository }
            };
        }
    }]);

    return RepoBadge;
}(_react.Component);

RepoBadge.propTypes = {
    repository: _react.PropTypes.string.isRequired,
    title: _react.PropTypes.string,
    apiData: _react.PropTypes.object,
    apiError: _react.PropTypes.object,
    showKeys: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired
};
RepoBadge.defaultProps = {
    showKeys: ['description']
};
exports.default = RepoBadge;