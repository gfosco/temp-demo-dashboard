'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _ui = require('mozaik/ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Status = function (_Component) {
    _inherits(Status, _Component);

    function Status() {
        _classCallCheck(this, Status);

        return _possibleConstructorReturn(this, (Status.__proto__ || Object.getPrototypeOf(Status)).apply(this, arguments));
    }

    _createClass(Status, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                _status = _props.apiData,
                apiError = _props.apiError;
            var theme = this.context.theme;


            var status = 'unknown';
            var messageNode = void 0;
            var meta = void 0;
            if (_status) {
                status = _status.status;
                messageNode = _status.body;
                meta = _react2.default.createElement(
                    'span',
                    { style: { color: theme.colors.textMute } },
                    _react2.default.createElement('i', { className: 'fa fa-clock-o' }),
                    '\xA0',
                    (0, _moment2.default)(_status.created_on).fromNow()
                );
            }

            return _react2.default.createElement(
                _ui.Widget,
                null,
                _react2.default.createElement(_ui.WidgetHeader, {
                    title: 'GitHub',
                    subject: 'Status',
                    subjectPlacement: 'append',
                    icon: 'github-alt'
                }),
                _react2.default.createElement(
                    _ui.WidgetBody,
                    null,
                    _react2.default.createElement(
                        _ui.TrapApiError,
                        { error: apiError },
                        _react2.default.createElement(_ui.WidgetStatusBadge, {
                            status: status,
                            message: messageNode,
                            meta: meta
                        })
                    )
                )
            );
        }
    }], [{
        key: 'getApiRequest',
        value: function getApiRequest() {
            return { id: 'github.status' };
        }
    }]);

    return Status;
}(_react.Component);

Status.propTypes = {
    apiData: _react.PropTypes.shape({
        status: _react.PropTypes.string.isRequired,
        body: _react.PropTypes.string.isRequired
    })
};
Status.contextTypes = {
    theme: _react.PropTypes.object.isRequired
};
exports.default = Status;